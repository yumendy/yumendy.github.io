<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>One more time, one more chance</title>
    <url>/2014/04/cl0rhzovs000372q13hn112dq/</url>
    <content><![CDATA[<p><em>一首有故事的歌。据说喜欢的人都是有故事的人。</em></p>
<span id="more"></span>

<p>又一次的听见了这一首歌曲，只是，这一次是一个完全不同的版本，这次是一个女声独唱的英文的版本，又是另外的一种滋味，但是依旧是那一支唱在心里的歌。听得越久，心中那种那种感觉就越发的久久不能平静。</p>
<p>也许就像歌词中写的那样，如果只是想排遣寂寞，那么找谁都可以。但是我却不能再欺骗我自己。</p>
<p>有时候有些东西一旦错过也许永远都不会再一次回来，仔细想想，在曾经的某一刻是不是有某个人曾经也令自己内心为之一颤，是不是有哪个人，藏在心底一直都不曾对别人说起。现在这个人又在哪里？又是怎么样的呢？</p>
<p>太多太多的未知，听到最多的一句话就是在前面一定会有一个人等着你的，那么就让我期待着，谁会是出现在我生命里一直陪伴我的那一个？</p>
<blockquote><p>Tell me how much more do I have to lost</p>
<p>Before I can ever forgive myself</p>
<p>Do you know how much more pain I must endure</p>
<p>Before I can ever see your face again</p>
<p>One more time</p>
<p>Tell me why the season keep on changing</p>
<p>One more time</p>
<p>Missing all the times that we shared as one</p>
<p>All those times when we used to argue back and forth</p>
<p>I always just let you have it your way</p>
<p>What kind of spell did you cast on me</p>
<p>I even loved all of your selfish ways</p>
<p>One more chance</p>
<p>When I find mysely lost in those memories</p>
<p>One more chance</p>
<p>I don’t know where to land</p>
<p>It doesn’t matter where I am because</p>
<p>I can’t help but look for you everywhere</p>
<p>On the station platform,</p>
<p>in the alley windows</p>
<p>I keep fooling myself thinking I might find you there</p>
<p>Never thought I would wish upon a star</p>
<p>I just want to be there by your side</p>
<p>There’s nothing that I won’t do, I’d give up everything</p>
<p>Just to hold you in my arms, one more time</p>
<p>If all I wanted was just not to be alone,</p>
<p>I should be happy with just anyone</p>
<p>But tonight the stars are hanging by a thread,</p>
<p>and I can’t lie to myself anymore</p>
<p>One more time</p>
<p>Tell me why the seasons keep on changing</p>
<p>One more time</p>
<p>Missing all the times that we shared as one</p>
<p>It doesn’t matter where I am because</p>
<p>Can’t help but look for you everywhere</p>
<p>At the intersection, even in my dreams</p>
<p>Knowing there is no way you would be there</p>
<p>If I could just believe in miracles</p>
<p>I would do anything to show you now</p>
<p>In the morning light, completely new me</p>
<p>I’d tell you what I couldn’t say before,</p>
<p>“I love you”</p>
<p>Memories of our summers together ooh</p>
<p>Our beating hearts were heard no more</p>
<p>It doesn’t matter where I am because</p>
<p>Can’t help but look for you everywhere</p>
<p>The morning sun rises, city of Sakuragi</p>
<p>I keep fooling myself thinking I might find you there</p>
<p>Never thought I would wish upon a star</p>
<p>I just need you right here by my side</p>
<p>There’s nothing that I won’t do, I’d give up everything</p>
<p>Just to hold you in my arms, one more time</p>
<p>It doesn’t matter where I am because</p>
<p>Can’t help but look for a trace of you</p>
<p>At every corner store, in the newspaper</p>
<p>Knowing there is no way that you would be there</p>
<p>If I could just believe in miracles,</p>
<p>I would open my heart up once again</p>
<p>In the morning light, a completely new me</p>
<p>I’d tell you what I couldn’t say before,</p>
<p>“I love you.”</p>
<p>It doesn’t matter where I am because</p>
<p>Can’t help but to search for your smile</p>
<p>At the railway crossing, watching the trains pass by</p>
<p>Even though there’s no way that you’d be there</p>
<p>If I could live my life all over again,</p>
<p>I would be with you for all time</p>
<p>There’s nothing else in this world I want more than what I had</p>
<p>There would never be anything but you that I would ask for</p>
</blockquote>]]></content>
      <categories>
        <category>生活</category>
        <category>动漫</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-00</title>
    <url>/2014/10/cl0rhzovv000672q157d30gob/</url>
    <content><![CDATA[<p>Python challenge 00</p>
<p>主要内容：</p>
<ul>
<li>python内建乘方运算符<code>**</code></li>
</ul>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/0.html</a></p>
<p>第0关属于是让大家熟悉游戏玩法的关卡，没有任何的难度，就是让大家知道，游戏进入下一关是通过修改url的方式。对。。就是直接改地址栏里的地址进入下一关。</p>
<p>这是一个典型的图片题，屏幕上的文字就是答案。2的38次方。可以用Python直接计算。对没有错的，对于Python来说99的99次方都是可以直接计算的。更何况这个呢。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ** <span class="number">38</span>)</span><br></pre></td></tr></table></figure>

<p>答案是<code>274877906944</code>。修改地址，顺利进入下一关。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-01</title>
    <url>/2014/11/cl0rhzovx000872q1hzh78zwg/</url>
    <content><![CDATA[<p><em>Python string库相关内容。</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/map.html</a></p>
<p>这一关其实难度也不大，看一眼本子上写的内容立刻就知道了是一组最简单的替换密码，把字母依次向前推两个就可以得到正确的答案了。最基本的做法是用<code>ord</code>函数和<code>chr</code>函数通过ASCII码的加法可以简单的达到目的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">string</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(item) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(item) &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">            out.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(item) + <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">elif</span> item == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            out.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> item == <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            out.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out.append(item)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line">    </span><br><span class="line">src = raw_input()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> change(src)</span><br></pre></td></tr></table></figure>

<p>但是！！！</p>
<p>真的需要这么多代码来做这一件事情吗？？</p>
<p>我们用的可是Python。。。</p>
<p>一定是姿势不对~~~</p>
<p>没错。。。。。</p>
<p>其实正确的做法应该是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">text = raw_input()</span><br><span class="line"></span><br><span class="line">table = string.maketrans(string.ascii_lowercase,string.ascii_lowercase[<span class="number">2</span>:]+string.ascii_lowercase[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(string.translate(text,table))</span><br></pre></td></tr></table></figure>

<p>没错！！真的只需要四行就可以搞定这个问题了，但是这些代码又是什么意思呢？</p>
<p>一起来看看吧~</p>
<p>先说说string里的一些常量吧：</p>
<p><em>string.ascii_letters</em>：一个包含小写字母和大写字母的字符串。</p>
<p><em>string.ascii_lowercase</em>：一个只包含小写字母的字符串。</p>
<p><em>string.ascii_uppercase</em>：一个只包含大写字母的字符串。</p>
<p><em>string.digits</em>：一个包含0~9数字的字符串。</p>
<p>在这个问题中，用到了两个特殊的string的方法：</p>
<p>第一个是<code>string.maketrans</code>，第二个是<code>string.translate</code>。它们分别是做什么的呢？</p>
<p>逐个来说吧：</p>
<p><code>string.maketrans</code></p>
<p>函数原型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string.maketrans(<span class="keyword">from</span>, to)</span><br></pre></td></tr></table></figure>

<p>函数的功能就是创建了一个从字符到字符的映射表，为后续使用translate()提供基础。</p>
<p>第一个参数是原始字符串，第二个参数是目标字符串。</p>
<p>在这个问题中，将字符向前移位三个，所以原始字符串是从a到z的字符，所以可以直接用string.ascii_lowercase来作为第一个参数。</p>
<p>第二个参数可以通过对<code>string.ascii_lowercase</code>常量的切片和组合来完成。这样就构建成了一个字符的映射表。</p>
<p>接下来的工作就是对字符串的翻译。</p>
<p>我们可以使用<code>translate</code>函数。</p>
<p>函数原型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string.translate(s, table[, deletechars])</span><br></pre></td></tr></table></figure>



<p>接受三个参数，其中第三个参数是可选的。</p>
<p>第一个参数为需要解密的字符串，第二个参数是映射表，第三个参数是需要删除的字符表。</p>
<p>返回值为翻译完成的字符串。</p>
<p>根据题目的提示，对url翻译可以得到下一关的地址：<strong>ocr</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>The Secret</title>
    <url>/2014/03/cl0rhzovz000972q1855k895d/</url>
    <content><![CDATA[<p><em>一本和生活态度息息相关的书。。。</em></p>
<span id="more"></span>

<blockquote><p>As above so below, as inside so outside.</p>
</blockquote>

<!-- more -->

<p>今天在书柜里又看到了这本书，真的有很多的感慨。</p>
<p>说起这本书，还得谢谢小猪，记得当时还是刚上高三，刚刚结束了让人蛋疼无比的竞赛，不用说也知道，结果并不那么让人满意，我知道我并不是一个聪明的人，而竞赛需要的更多的是一种天资。怎么说呢，我不知道那时候的生活除了绝望还有什么。没几天就是高考了，但是除了化学以外，我所有的课程水平还不如一个刚入学的高一学生。我可以说我没有浪费每一天的时间，但是，这个重要吗？自己的知识结构就是一个破沙袋，千疮百孔，告别了那些竞赛题，感觉生活一下子不一样了，不论我说什么，都会变得苍白无力，也许就像那时候学长说的一样，竞赛不是一条捷径，是一个不成功便成仁的豪赌。也许这就是一个人生的低谷吧，无意中和小猪说起自己的无奈。小猪就建议我去读读《The Secret》。于是去当当买了一本，我想有时候，命运的改变就是在一句话之间。</p>
<p>拿到书我便读了起来，我的最真切的感受就是相见恨晚。说句实在话，像吸引力法则这样的东西，我不知道我是不是该去相信，用正元的话说这就是一种黑科技，没有办法证真，也没有办法证伪。事实如此。但是我认为，我可以去相信它，相信不一定是去沉迷。我认为它对我最大的影响就是它给我了一个保持好心态的理由。我不用去质疑我为什么要保持这样的心态。当然，有些事情也是不得不说的，我也不得不感慨，有时候生活之于我，是不是多了太多的玩笑。。。或者说是太多的恶意。</p>
<p>看看现在的书里，依旧夹着那时候的读书笔记。里面有原文的摘录也有自己的一些感悟，我现在把这些拿出来与大家分享，也算是一种自勉。</p>
<blockquote><p>Everything that’s coming into your life you are attracting into your life. And it’s a attracted to you by virtue of the images you’re holding in your mind. It’s what you’re thinking. Whatever is going on in your mind you are attracting to you.</p>
</blockquote>

<blockquote><p>When you’re feeling down, did you know that you can change it in an instant? Put on a beautiful piece of music, or start singing - that’ll change your emotion. Or think of something beautiful. Think of a baby or somebody that you truly love, and do well on it. Really keep that thought in your mind. Block everything out but that thought. I guarantee you’ll start to feel good. Make a list of some Secret Shifters to have up your Sleeve. By Secreat Shifters, I mean things that can change your feelings in a snap. It might be beautiful memories, future events, funny moments, nature, a person you love, your favourite music. Then if you find yourself angry or frustrated or not feeling good, turn to your Secret Shifters list and focus on one of them. Different things will shift you at different times, so if one doesn’t work, go to another. It only takes a minute or two of changing focus to shift yourself and shift your frequency.</p>
</blockquote>

<blockquote><p>It is the combination of thought and love which forms the irresisible force of the law of attraction.</p>
</blockquote>

<blockquote><p>If you could wrap every thought in love, if you could love everything and everyone. Your life would be transformed.</p>
</blockquote>

<blockquote><p>The most important thing for you to know is that it is impossible ti feel bad and at the same time be having good thoughts. That would defy the law, because your thoughts cause your feelings. If you are feeling bad, it is because you are thinking thoughts that are making you feel bad.</p>
</blockquote>

<p>暂且摘录这么多，简单点说我们需要时时刻刻保持一个好的心态，就算生活里有点不快，但总体已经是好的。别让自己的生活充满阴影~与诸君共勉。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu更新时提示/boot空间不足解决方案</title>
    <url>/2014/10/cl0rhzow2000c72q1g4963bb7/</url>
    <content><![CDATA[<p><em>卸载Linux旧版内核相关</em></p>
<span id="more"></span>

<p>由于linux每次更新新的内核时不会卸载旧的内核，所以boot的空间会被占用很多，导致新的更新不能正常安装。这时候就需要用户手动清理旧的内核来腾出空间供新的更新使用。</p>
<p>查看已经安装的内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --get-selections |grep linux-image</span><br></pre></td></tr></table></figure>

<p>查看当前启动的内核（理论上讲，除了这个之外其他的都可以卸载了，不过建议保留一两个之前版本）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>

<p>卸载老版本的内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge linux-image-3.13.0-34-generic <span class="comment"># 卸载linux-image-3.13.0-34-generic内核</span></span><br></pre></td></tr></table></figure>

<p>ok！问题解决了。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2014/11/cl0rhzow4000e72q142ga8wc5/</url>
    <content><![CDATA[<p><em>感恩节随感</em></p>
<span id="more"></span>

<p>转眼又到了一年一度的感恩节。</p>
<p>其实想想写这样的东西也许有一点点的应景。但是我还是觉得，应该写写。</p>
<p>转眼间又是一年过来了，每年到了年末的时候就会想想这一年发生的一切的一切。不管是开心的，还是不开心的，都已经过去了。留下的更多的是一段对时光的追忆与不舍。</p>
<p>其实不管从哪个角度来看，现在的生活都是有一点点的不堪的，忙忙碌碌，每天会用各种各样的事情填满自己的TODOLIST，有的时候却又难免的顾此失彼。随即而来的也有不少的麻烦。好在不管多么艰难，很多事情都走过来了。当然，这一些少不了身边默默支持着我的每一个你。想想不管是一句不经意间的问候，还是一句简单的鼓励，对我来说，都是前行的动力。</p>
<p>想想这一年的时间，经历了太多，从刚刚进入大学的一无所知，到现在基本确定了前进的方向。真的是一个很艰难的过程。经历了太多的人和事，被理解、被误解，不管怎么说都是一种成长。</p>
<p>所谓活着艰难，其实对每个人都一样，只是看该去怎么面对这样的日子了。知足、常乐。想想自己很多的不快，也许都是因为自己的不知足。而事实上，很多事情其实已经远远的超过了自己的预期太多。这与贪婪无关，只是因为，对于一个很遥远的目标，也许曾经从来都没有认为自己可以达到，只是抱着试试的态度，却发现，努力过，也许距离并不像自己想象的那么遥远。就是这样坚持前行。</p>
<p>也许就像<em>The Secret</em>里说的一样，时刻应该怀着感恩之心。其实经历的一切都是生活的馈赠，这世上没有什么事情是绝对的坏事，不管经历了什么，还是多去看看好的方面吧。快乐也可以很单纯。</p>
<p>需要感谢的人和事真的很多。。。想说的话挺多的，但是又不知道该怎么说才好。就简简单单的说一句“谢谢”吧。</p>
<p>前路漫漫，依旧需要坚持下去。伴着内心深处的信念继续前行。。。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>随感（一）</title>
    <url>/2014/09/cl0rhzow5000g72q1hnup1u62/</url>
    <content><![CDATA[<p> <em>就是一篇生活的随感</em></p>
<span id="more"></span>

<p>很久都没有写东西了~</p>
<p>虽然依然繁忙，但是总觉得有些东西还是需要写写的~平凡的日子就是这样忙忙碌碌，如果不回过头看看这些岁月，也许很快就会迷失在时间的流逝中了吧。</p>
<p>不知从什么时候起，总会梦到相似的情景。每当这时，总会不自觉的感到忧伤。</p>
<p>于是，我又一次翻开了秒五的小说。熟悉的剧情，但每一次都会有不同的感受。</p>
<p>这一次当然也不例外。</p>
<p>很多事情也许就是真的这么无奈。总会有太多说不出口的话。我也不知道从什么时候起，也许所谓自信这东西离我越来越远。生活诸多的不易，让我越来越看到了自己的渺小。</p>
<p>不知道是从什么时候起，时光褪去了繁华，慢慢喜欢上了一个人的世界，默默的做着自己的事情。不知道心里的梦想，还有多远，但是总相信，只要这一刻不放弃，下一刻就有希望。是的，下一刻就有希望，虽然不知道这一条路还要走多远，但终究是要走下去的。</p>
<p>又想起了在京城的那一天，在拥挤的昌平线上呼吸着污浊的空气。，看着周围行色匆匆的行人；还有那班夜色里空空荡荡的夜班车，在昏黄的路灯下，颠簸前行。想到这一切，总是会触动内心深处最柔软的角落。突然间就变得伤感起来，前路漫漫，前路又到底在哪里呢？想想现在的生活，幻想着未来的一切，忽然间就觉得肥皂泡总是有破碎的一刻。</p>
<p>普通人总是有着普通人的生活，从来就不甘平庸。在斑驳的灯影下，不经想到，我该面对什么样的日子。如果继续平庸下去，也许就会像这夜班车里拖着疲惫身体奔波早晚奔波在家与单位那遥远的路途上的北漂们。其实在不在北京并不重要，只是那一种生活状态，才是令我诟病已久的。</p>
<p>我不知道在996的生活中是不是能真的看到所谓的希望。也许有太多的值得期许的东西，但是更多的也许是一种所谓生活的无奈吧。无处下脚的早高峰，困倦中的末班车。也许每一个城市繁华霓虹下都有着自己的浪漫，但是这一切又与那些为生计而奔波的人有什么关系呢。也许永远只能是心中的一丝期许。</p>
<p>不知道这么说是不是有一点绝对，但是在经历了种种之后我越来越觉得这是一个难以磨灭的事实。</p>
<p>就像我现在过着的生活一样，我从来不觉得有多么的风光，我也不喜欢那些所谓的光环。更不想为了所谓的表象让自己显得很强，也许对于我而言，真实才是最重要的吧，生活本来就是艰难的，如果再给自己戴上一个无谓的伪装，恐怕只会让原本不堪的生活变得更是无措。我并不担心真实会给我带来什么样的损失。也许就像某句谚语里说的一样，也许只有在自己最艰难时，依旧愿意留在自己身边的才是真正值得自己在意的人吧。</p>
<p>开学第一周，已经就开始被各种无形的压力笼罩了，我并不苛责完美，但我总是希望自己可以忙碌起来，我知道我自己的那种不堪的状态，一旦有一丝闲暇，就会纠结在自己的各种小情绪里，完全的庸人自扰。就算是我自己也不明白为什么会是这样的状态，在其他人看来也许是一些完全不值一提的小事，却总被我那样无限的放大了。这一切，也许就是因为在意吧。就是因为在意，才会无比的小心翼翼。</p>
<p>想起的就是秒五里贵树的生活，在心里有自己放不下的东西，想小说里写的一样，“这些年只是简单地生活着，悲伤到处积累。”喜欢上了编程这样的工作，虽然这份工作很孤独而且需要忍耐和集中力，但其结果绝不会背叛自己所付出的劳动。如果程序没有正常运行，那么原因毫无疑问就在自己身上。</p>
<p>其实想想自己的生活不也就是这样。简简单单的，其实也没有什么不好，抛去了那些无谓的羁绊，留下的就是内心深处最珍视的东西。一切宛然成了自己前进的动力。</p>
<p>除了继续奋斗，我还能怎样呢。在这茫茫人海里，那么多的人都是这样怀揣着梦想一路前行的，又有多少人是倒在了半途中。前途虽然渺茫，但是如果停下了前行的脚步，也许就永远也到不了彼岸吧？我不知道我能走多远，我也不知道我会不会真的能实现心底的梦想。但是我会更努力的继续奋斗下去的。希望这一切最终可以换回一个无悔的明天吧。</p>
<p>（想想这世界上真的有很多事情很无奈，很久了吧，很多事情也许我没有办法改变甚至是没办法知道结果，但是依然在坚持，也许就是那么的一点点心存侥幸，但是即使是这样，我也不愿放弃。默默承受所有的压力与辛酸，纵使无人知晓，也自得其乐，知足与之不足。且行且珍惜吧。）</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>随感（二）</title>
    <url>/2014/10/cl0rhzow6000i72q1cuep18r6/</url>
    <content><![CDATA[<p><em>一篇旅途归来的随感。。</em></p>
<p>四天的旅途，终究还是要结束了。我现在应该怎么来描述我的心情呢？</p>
<p>还记得辉导说我是一只装得太满的水杯。</p>
<p>其实想想，我无可辩驳。已经不知道是从什么时候起就已经陷入了这样的一个状态。碌碌中似乎是想逃避些什么，但事实也许就是在逃避一些什么。</p>
<p>很多东西也许并不是真的因为没有面对的勇气，也许反而是因为太过于在意，才变得小心翼翼。</p>
<p>一场说走就走的旅行，匆忙中少了很多的计划性。但是这个对于我而言已经不重要了。总被各种时间表束缚的所谓有条理的生活有时候真的很累。看似每一分钟都恰到好处，但真正发现遗失了的才是率性的快乐。</p>
<p>一种完全不同的生活方式，短短的四天时间，完全的随心随性。关闭了社交应用，静静的享受着难得的悠闲时光。</p>
<p>天津、北京，其实是哪里已经不那么重要了，这是一段心的旅途。用心去体会其中的点点滴滴。无言的感动萦绕心间。</p>
<p>一段充满希冀与期待的旅途。</p>
<p>倒空了杯子，才知道，生活是这样的美好。</p>
<p>明天，生活又将回到那样忙碌的状态，但是也许对我来说和以前有了太多的不同吧。</p>
<p>谢谢旅途中陪伴我的每一个人。相聚总是匆匆，再相见时，不知又是何时。</p>
<p>最难开口的两句话，莫过于初次见面时的“你好”，和离别时的“再见”。请原谅我道完再见后不回首的离开。我真的怕一回头就忍不住会流泪。</p>
<p>期待下一次的重逢。。。。。。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt ipv6 NAT配置</title>
    <url>/2015/12/cl0rhzow7000k72q13d591y5j/</url>
    <content><![CDATA[<p>一个折磨了我三年的问题</p>
<p>通过这篇文章，你可以了解到：</p>
<ul>
<li>如何在openwrt上配置ipv6的NAT</li>
<li>如果一定要问意义在哪里的话可能就是可以在宿舍开心的挂PT了吧</li>
</ul>
<span id="more"></span>

<p>其实一定要说的话。。。我的感觉应该算是还个愿吧，直言不讳的说，从入学开始折腾路由器以来，这个问题已经困扰我了整整两年半，每个学期都会用那么一两个通宵的时间去折腾这东西，依然记得以前最好的记录是折腾到路由器本身可以获取到ipv6地址，可以ping通外部ipv6服务器，内网可以分配ipv6地址，但是还是不能转发ipv6，还记得两年前还用着13.X的版本，现在已经15.05惹。。。还是少感慨两句开始正题吧</p>
<p>本人的机器是Tplink-720N，改过的，16M的Flash和64M的内存，就是专门为了折腾买的。</p>
<p>其实我觉得这一次的成功主要还是得益于openwrt主版本的升级，从内核层面上加强了对ipv6的支持。</p>
<p>说一下我们的思路其实就是完成一个NAT的配置，不过不同于我们一般IPV4配置的是，IPV6里很多配置需要自己来设置，不能自动完成</p>
<p>首先需要安装一些软件：</p>
<ul>
<li>ip6tables</li>
<li>ip6tables-mod-nat</li>
<li>kmod-ipt-nat6</li>
<li>kmod-ipv6</li>
</ul>
<p>这些都是ipv6的支持组件，如果安装正确的话现在路由器已经可以获取到ipv6的地址了，但是还不能分配下去，也不能做路由转发。</p>
<p>接下来就是比较关键的步骤了，我们先进入接口页面记录下我们获取到的ipv6地址。</p>
<img src="/2015/12/cl0rhzow7000k72q13d591y5j/1.png" class="">

<p>这里的前缀的80位是我们以后要用到的，需要记录下来。</p>
<p>所谓的80位，指的是80个bit也就是你看到的前5节，第五节被我打码了。</p>
<p>在全局网络选项中的IPv6 ULA前缀设置为刚才记录下的前80位，并写明长度为80.</p>
<img src="/2015/12/cl0rhzow7000k72q13d591y5j/2.png" class="">

<p>记录下这个地址，然后点击LAN口编辑，ipv6分配长度改为禁用。</p>
<p>DHCP高级中设置如图：</p>
<img src="/2015/12/cl0rhzow7000k72q13d591y5j/3.png" class="">

<p>现在我们需要给路由器的LAN像ipv4一样设置一个IPV6的地址用来做网关，然后进行NAT转发，不要试图使用上图中的那几个框框设置ipv6的地址，因为我们想往下划分的是一个80位的子网，在这里如果直接设置的话一定会挂掉的，所以我们需要另行其道。</p>
<p>其实也不是什么复杂的办法，直接在系统-启动项的本地启动脚本中加一行ip配置就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig br-lan 2001:DA8:B800:1A02:XXXX::1/80</span><br><span class="line"><span class="comment"># 这里的ipv6地址请根据之前抄下来的网段设置。</span></span><br></pre></td></tr></table></figure>

<p>这一下好了，试一下发现，电脑可以取到正确的ip了，可以ping通路由器的这个LAN的ipv6地址了，但是还是链接不了外网的ipv6.</p>
<p>嗯~没错。。。防火墙规则需要自己写，接下来去网络-防火墙选单里，自定义规则添加两条就完事了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip6tables -P FORWARD  ACCEPT</span><br><span class="line">ip6tables -t nat -I POSTROUTING -s 2001:DA8:B800:1A02:XXXX::/80 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p>重启路由器，重启电脑，看看效果。</p>
<img src="/2015/12/cl0rhzow7000k72q13d591y5j/4.png" class="">

<p>如果还是不放心的话，ping一下试试呗~</p>
<img src="/2015/12/cl0rhzow7000k72q13d591y5j/5.png" class="">

<p>嗯~就是这样，可以愉快的在宿舍挂PT惹~~</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>网络</tag>
        <tag>IPv6</tag>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-02</title>
    <url>/2015/01/cl0rhzow9000n72q1eyfvfrra/</url>
    <content><![CDATA[<p><em>Python频繁元素统计</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>
<p>这一关实际上非常简单，在屏幕提示的“recognize the characters. maybe they are in the book, but MAYBE they are in the page source.”这一句话稍微一琢磨就可以知道，此处的source指的是源代码。那么直接查看网页源码，果不其然有一大段注释，是由各种符号组成的，有一句提示是find rare characters in the mess below。就是说在里面找出出现频率低于平均值的字符。放眼望去一片标点符号。那么最简单的办法就是直接筛出来英文字母了。把文段内容全部拷贝到一个“in.data”的文件中，然后执行下面的代码就可以轻松的得到最后的答案了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outstring = <span class="string">&#x27;&#x27;</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;in.data&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> letter &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> letter &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">                outstring += letter</span><br><span class="line">fp.close()</span><br><span class="line"><span class="built_in">print</span> outstring</span><br></pre></td></tr></table></figure>

<p>如果需要更简单的解法，那么可以使用<code>filter</code>函数来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;in.data&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x <span class="keyword">in</span> string.letters, fp.read())</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<p>关于filter函数：</p>
<p><code>filter(function, sequence)</code></p>
<p>对sequence中的item依次执行function(item)，将执行结果为True的item组成一个List/String/Tuple（取决于sequence的类型）返回</p>
<p>但是不得不承认的是，这是一种偷懒的做法，如果真的要去统计具体的字符频率的话可以使用字典的方法。这样可以减少难度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outstring = <span class="string">&#x27;&#x27;</span></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;in.data&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> line:</span><br><span class="line">        <span class="keyword">if</span> letter <span class="keyword">in</span> dic:</span><br><span class="line">            dic[letter] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dic[letter] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> letter &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> letter &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            outstring += letter</span><br><span class="line">fp.close()</span><br><span class="line">lst = dic.items()</span><br><span class="line">lst.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span> x</span><br><span class="line"><span class="built_in">print</span> outstring</span><br></pre></td></tr></table></figure>

<p>得到下一关的地址：<strong>equality</strong></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-03</title>
    <url>/2015/01/cl0rhzowa000q72q10n0s9l14/</url>
    <content><![CDATA[<p><em>Python re包的使用</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/equality.html</a></p>
<p>这一关没有什么特别的地方，已经写的比较清楚了，就是找字符串，不用考虑都能确定用的一定是正则表达式。但是需要注意的是他的表述，“一个两边绝对被3个大写字母夹着的小写字母。”也就是说必须是这样形式的”xXXXaXXXx”只有满足这样形式的a才被认为是符合条件的字母。</p>
<p>那么只要按照这样的思路去编写正则表达式就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(?&lt;=[a-z][A-Z]&#123;3&#125;)([a-z])(?=[A-Z]&#123;3&#125;[a-z])&#x27;</span>)</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;data.in&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">text = fp.read()</span><br><span class="line">fp.close()</span><br><span class="line">m = re.findall(pattern,text)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(m)</span><br></pre></td></tr></table></figure>

<p>如此便可以得到下一关的url：<strong>linkedlist</strong></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-04</title>
    <url>/2015/01/cl0rhzowc000s72q1ghp82lqy/</url>
    <content><![CDATA[<p><em>Python urllib</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/linkedlist.php</a></p>
<p>这一关是非常有意思的一关，点击一下图片就可以进入一个页面写着“and the next nothing is xxxxx”。其中xxxxx是一个数字，在看一眼url就知道是什么意思了，就是这样不断的去点url它总会给出一个提示的，但是这样繁杂的工作如果让人去做的话就真的是无比蛋疼了，Python一直号称是在web编程方面极具有特色的一种语言，那么处理这样的问题应该也是非常简单的。</p>
<p>遇到网络问题首先想到的就是Python标准库里的urllib和urllib2.两个基本的库。</p>
<p>urllib可以将一个网页以文件的形式打开，方便了用户以文件的形式读取内容。urllib2则提供了更为强大的各种功能，包括cookies和session等。</p>
<p>在这个题目里简单的使用urllib就可以搞定了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&#x27;</span></span><br><span class="line">num = <span class="string">&#x27;8022&#x27;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    line = urllib.urlopen(url+num).readline()</span><br><span class="line">    num = line.split()[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span> line</span><br></pre></td></tr></table></figure>

<p>很快就得到了下一关的提示：<strong>peak.html</strong></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-05</title>
    <url>/2015/01/cl0rhzowe000u72q12yoy637z/</url>
    <content><![CDATA[<p><em>python pickle模块，数据持久化。</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/peak.html</a></p>
<p>这一关在我第一次接触Python Challenge的时候卡了我好久。后来在阅读《Python核心编程》的时候看到了数据持久化存储那一章才明白是怎么回事。题目中说发出那个单词的音，其实读了半天才知道和pickle比较音近，其中这个pickle的作用就是数据的持久化存贮，它可以方便的把对象、字典等等数据结构以文件的形式储存并且再一次还原回来。主要用的两个接口是dump和load。明白了这个之后，这个题目就好办了。</p>
<p>对于这样的题，一样的做法，查看源代码。看到了这样一行：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">peakhell</span> <span class="attr">src</span>=<span class="string">&quot;banner.p&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>还用问吗？果断扒下来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;banner.p&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">banner = pickle.load(fp)</span><br><span class="line">fp.close()</span><br><span class="line"><span class="built_in">print</span> banner</span><br></pre></td></tr></table></figure>

<p>于是就能看见输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[(&#x27; &#x27;, 95)], [(&#x27; &#x27;, 14), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 70), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 15), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 71), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 15), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 71), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 15), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 71), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 15), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 71), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 15), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 71), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 15), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 71), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 15), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 71), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 6), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 6), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 9), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 7), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 10), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 7), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 7), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 6), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 7), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 7), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 1), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 11), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 6), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 1), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 11), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 10), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 7), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27;#&#x27;, 4), (&#x27; &#x27;, 11), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 7), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27;#&#x27;, 4), (&#x27; &#x27;, 11), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 10), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 14), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27;#&#x27;, 4), (&#x27; &#x27;, 11), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 12), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27;#&#x27;, 4), (&#x27; &#x27;, 11), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 12), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 1), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 11), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 12), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 6), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 6), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 3), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 11), (&#x27; &#x27;, 3), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 2), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1)], [(&#x27; &#x27;, 6), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 5), (&#x27;#&#x27;, 6), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 2), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 4), (&#x27; &#x27;, 1), (&#x27;#&#x27;, 6), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 11), (&#x27; &#x27;, 4), (&#x27;#&#x27;, 5), (&#x27; &#x27;, 6), (&#x27;#&#x27;, 3), (&#x27; &#x27;, 6), (&#x27;#&#x27;, 6)], [(&#x27; &#x27;, 95)]]</span><br></pre></td></tr></table></figure>

<p>一看这样一个列表里套列表的，然后每个列表里又是元组，想到的就是字符画。</p>
<p>一个列表就对应于一行。这样的话就好办多了。挨着打出来就可以了，小小的修正一下程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;banner.p&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">banner = pickle.load(fp)</span><br><span class="line">fp.close()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> banner:</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> tmp <span class="keyword">in</span> line:</span><br><span class="line">        s += tmp[<span class="number">0</span>] * tmp[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>然后就看到了最终的答案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">              #####                                                                      ##### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">      ###      ####   ###         ###       #####   ###    #####   ###          ###       #### </span><br><span class="line">   ###   ##    #### #######     ##  ###      #### #######   #### #######     ###  ###     #### </span><br><span class="line">  ###     ###  #####    ####   ###   ####    #####    ####  #####    ####   ###     ###   #### </span><br><span class="line"> ###           ####     ####   ###    ###    ####     ####  ####     ####  ###      ####  #### </span><br><span class="line"> ###           ####     ####          ###    ####     ####  ####     ####  ###       ###  #### </span><br><span class="line">####           ####     ####     ##   ###    ####     ####  ####     #### ####       ###  #### </span><br><span class="line">####           ####     ####   ##########    ####     ####  ####     #### ##############  #### </span><br><span class="line">####           ####     ####  ###    ####    ####     ####  ####     #### ####            #### </span><br><span class="line">####           ####     #### ####     ###    ####     ####  ####     #### ####            #### </span><br><span class="line"> ###           ####     #### ####     ###    ####     ####  ####     ####  ###            #### </span><br><span class="line">  ###      ##  ####     ####  ###    ####    ####     ####  ####     ####   ###      ##   #### </span><br><span class="line">   ###    ##   ####     ####   ###########   ####     ####  ####     ####    ###    ##    #### </span><br><span class="line">      ###     ######    #####    ##    #### ######    ###########    #####      ###      ######</span><br></pre></td></tr></table></figure>

<p>下一关的地址：<strong>channel</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-06</title>
    <url>/2015/01/cl0rhzowf000x72q1azuye08q/</url>
    <content><![CDATA[<p><em>python zip相关操作</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/channel.html</a></p>
<p>其实感觉真正是从这一关开始变得越来越有意思了。</p>
<p>看源代码。发现了关键的提示zip。。。</p>
<p>结合上一关的经验，想到的就是应该和一个zip文件有关，那么就先得得到这个文件。改url，把拓展名改为zip果然可以拉下来一个文件。zip的压缩包，打开之后发现是一大堆数字命名的txt，顿时想到了前几关的方法。。。好评的是给你了一个readme.txt的文件，并且告诉你了开始的文件。</p>
<p>那么就好办了。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="string">&#x27;90052&#x27;</span></span><br><span class="line">failname = num + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    fp = <span class="built_in">open</span>(failname,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    S = fp.readline()</span><br><span class="line">    num = S.split()[-<span class="number">1</span>]</span><br><span class="line">    failname = num + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> S</span><br><span class="line">    fp.close()</span><br></pre></td></tr></table></figure>

<p>发现运行到最后出现这样一句话“Collect the comments.”</p>
<p>那么问题就来了。。。注释。。哪里有注释呢？又想了想。。压缩包好像有注释这样的东西，那不就意思是要对压缩包进行一定的操作嘛~~所以果断去翻Python的文档。在标准库中找到了一个zipfile的库。。。专门用来处理zip文件。在页面里搜索comment，发现每一个压缩包内文件对象都会有一个ZipInfo对象，在这个对象中有一个属性就是comment。顿时感觉看到了曙光。</p>
<p>改改刚才的代码接着用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">num = <span class="string">&#x27;90052&#x27;</span></span><br><span class="line">failname = num + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">myzip = zipfile.ZipFile(<span class="string">&#x27;channel.zip&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">print</span> myzip.getinfo(failname).comment,</span><br><span class="line">	fp = <span class="built_in">open</span>(failname,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">	S = fp.readline()</span><br><span class="line">	num = S.split()[-<span class="number">1</span>]</span><br><span class="line">	failname = num + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">	fp.close()</span><br><span class="line"></span><br><span class="line">myzip.close()</span><br></pre></td></tr></table></figure>

<p>看看接下来输出了神马= =b</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line">* *                                                                                                                         * * </span><br><span class="line">* *       O O         O O         X X             Y Y Y Y         G G         G G     E E E E E E   N N             N N     * * </span><br><span class="line">* *       O O         O O     X X X X X X       Y Y Y Y Y Y       G G       G G       E E E E E E     N N         N N       * * </span><br><span class="line">* *       O O         O O   X X X     X X X   Y Y Y       Y Y     G G   G G           E E               N N     N N         * * </span><br><span class="line">* *       O O O O O O O O   X X         X X   Y Y                 G G G               E E E E E           N N N N           * * </span><br><span class="line">* *       O O O O O O O O   X X         X X   Y Y                 G G G               E E E E E             N N             * * </span><br><span class="line">* *       O O         O O   X X X     X X X   Y Y Y       Y Y     G G   G G           E E                   N N             * * </span><br><span class="line">* *       O O         O O     X X X X X X       Y Y Y Y Y Y       G G       G G       E E E E E E           N N             * * </span><br><span class="line">* *       O O         O O         X X             Y Y Y Y         G G         G G     E E E E E E           N N             * * </span><br><span class="line">* *                                                                                                                         * * </span><br><span class="line">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line">  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *</span><br></pre></td></tr></table></figure>

<p>hockey？</p>
<p>输入之后出现一个提示“it’s in the air. look at the letters.”</p>
<p>看字母。。。</p>
<p>发现组成每一个字母的字母都不一样，那么新的提示就来了：<strong>oxygen</strong>。</p>
<p>就是它了！</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-07</title>
    <url>/2015/01/cl0rhzowg000z72q1d6gr3og2/</url>
    <content><![CDATA[<p><em>Python经典图像处理库PIL的使用</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/oxygen.html</a></p>
<p>如果以前有接触过解谜类的游戏的话，这一个其实一下子就可以看出解题的思路来。但是问题就在于如果用一个Python的方法来做就需要想想了。</p>
<p>看到的是一张图片，上面有一个灰度条。作为一个weber，对灰度条还是比较敏感的，为什么？灰度条的rgb是相同的，同时它是一个0~255间的值。</p>
<p>看见255顿时感觉其实脑洞可以很大。传递信息的话。。当然还有一个东西就是ASCII了。。这么想下来的话就豁然开朗了。</p>
<p>处理图片自然要用到PIL。之前没有接触过，所以花了一晚上的时间去查PIL的资料，发现还是用起来非常蛋疼。</p>
<p>不管了，能用就可以。</p>
<p>先简单量了一下像素，发现整个条大概是609像素的样子，每个格子的宽度是7个像素。其余的就是格子距离上边界大概是45个像素。那么就可以去提取每一个格子的灰度值了。</p>
<p>注意的是代码里需要用到的几个函数和接口，open是打开一个图像对象。crop是获取图片的一个局部区域。getdata获取到的是一个一维数组，里面是每一个像素的信息，用一个元组表示，这一张图片是用一个四元组（R,G,B,A）表示像素信息的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;oxygen.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">box = (<span class="number">0</span>,<span class="number">44</span>,<span class="number">607</span>,<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">part = im.crop(box)</span><br><span class="line"></span><br><span class="line">result_num = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">607</span>,<span class="number">7</span>):</span><br><span class="line">	temp = part.getdata()[i]</span><br><span class="line">	result_num.append(temp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">chr</span>(x[<span class="number">0</span>]),result_num))</span><br></pre></td></tr></table></figure>

<p>好了，看看我们得到了什么，其实就是一句话：“smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]”</p>
<p>这还有什么疑问咩？再加两行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">121</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,lst))</span><br></pre></td></tr></table></figure>

<p>输出结果：<strong>integrity</strong>。</p>
<p>看了官方的解答之后。。。发现一个更简洁的解法。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL.Image</span><br><span class="line"><span class="built_in">print</span> PIL.Image.<span class="built_in">open</span>(<span class="string">&#x27;oxygen.png&#x27;</span>).tostring()[<span class="number">108188</span>:<span class="number">110620</span>:<span class="number">28</span>]</span><br></pre></td></tr></table></figure>

<p>没错。。。就酱。。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-08</title>
    <url>/2015/01/cl0rhzowj001472q1dkcybxk8/</url>
    <content><![CDATA[<p><em>Python bz2 模块</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/def/integrity.html</a></p>
<p>无语的一关，直接看源码，就看到了用户名和密码。想起来Python课的时候有一个实验就是和编码有关的，不过都是utf-8和unicode或者gbk之间转换的。但是这个一看就不是。隐隐有一种蛋疼的感觉，不过发现字符串的开头都是BZh91AY&amp;SY开头的。记得以前学编码的时候看过一些资料说这样的开头都是一种固定的编码方式编出来的，就是bz2.这样的话问题就变得无比简单了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;BZh91AY&amp;SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07&lt;]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084&#x27;</span>.decode(<span class="string">&#x27;bz2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;BZh91AY&amp;SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13&lt;]\\xc9\\x14\\xe1BBP\\x91\\xf08&#x27;</span>.decode(<span class="string">&#x27;bz2&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>两行代码搞定。</p>
<p>得到用户名：<strong>huge</strong><br>密码：<strong>file</strong></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-09</title>
    <url>/2015/01/cl0rhzowk001772q11s5v7fe3/</url>
    <content><![CDATA[<p><em>Python zip函数 turtle绘图</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/good.html</a></p>
<p>这一关感觉还是比较简单的，根据图片的提示就知道是做连线题了。那么在网页源码里看见两个数组。但是很明显不等长，那就意味着不是一个x、一个y，再一看长度，都是偶数个数字，很容易就想到了，那一定就是两条线了，那就是把坐标值之间写成一行了，只用分离一下然后连线就可以了。这个就好办了。用zip函数和切片轻松搞定。至于绘图的方法就更多了，我就用最简单的turtle模块画了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">first = [<span class="number">146</span>,<span class="number">399</span>,<span class="number">163</span>,<span class="number">403</span>,<span class="number">170</span>,<span class="number">393</span>,<span class="number">169</span>,<span class="number">391</span>,<span class="number">166</span>,<span class="number">386</span>,<span class="number">170</span>,<span class="number">381</span>,<span class="number">170</span>,<span class="number">371</span>,<span class="number">170</span>,<span class="number">355</span>,<span class="number">169</span>,<span class="number">346</span>,<span class="number">167</span>,<span class="number">335</span>,<span class="number">170</span>,<span class="number">329</span>,<span class="number">170</span>,<span class="number">320</span>,<span class="number">170</span>,<span class="number">310</span>,<span class="number">171</span>,<span class="number">301</span>,<span class="number">173</span>,<span class="number">290</span>,<span class="number">178</span>,<span class="number">289</span>,<span class="number">182</span>,<span class="number">287</span>,<span class="number">188</span>,<span class="number">286</span>,<span class="number">190</span>,<span class="number">286</span>,<span class="number">192</span>,<span class="number">291</span>,<span class="number">194</span>,<span class="number">296</span>,<span class="number">195</span>,<span class="number">305</span>,<span class="number">194</span>,<span class="number">307</span>,<span class="number">191</span>,<span class="number">312</span>,<span class="number">190</span>,<span class="number">316</span>,<span class="number">190</span>,<span class="number">321</span>,<span class="number">192</span>,<span class="number">331</span>,<span class="number">193</span>,<span class="number">338</span>,<span class="number">196</span>,<span class="number">341</span>,<span class="number">197</span>,<span class="number">346</span>,<span class="number">199</span>,<span class="number">352</span>,<span class="number">198</span>,<span class="number">360</span>,<span class="number">197</span>,<span class="number">366</span>,<span class="number">197</span>,<span class="number">373</span>,<span class="number">196</span>,<span class="number">380</span>,<span class="number">197</span>,<span class="number">383</span>,<span class="number">196</span>,<span class="number">387</span>,<span class="number">192</span>,<span class="number">389</span>,<span class="number">191</span>,<span class="number">392</span>,<span class="number">190</span>,<span class="number">396</span>,<span class="number">189</span>,<span class="number">400</span>,<span class="number">194</span>,<span class="number">401</span>,<span class="number">201</span>,<span class="number">402</span>,<span class="number">208</span>,<span class="number">403</span>,<span class="number">213</span>,<span class="number">402</span>,<span class="number">216</span>,<span class="number">401</span>,<span class="number">219</span>,<span class="number">397</span>,<span class="number">219</span>,<span class="number">393</span>,<span class="number">216</span>,<span class="number">390</span>,<span class="number">215</span>,<span class="number">385</span>,<span class="number">215</span>,<span class="number">379</span>,<span class="number">213</span>,<span class="number">373</span>,<span class="number">213</span>,<span class="number">365</span>,<span class="number">212</span>,<span class="number">360</span>,<span class="number">210</span>,<span class="number">353</span>,<span class="number">210</span>,<span class="number">347</span>,<span class="number">212</span>,<span class="number">338</span>,<span class="number">213</span>,<span class="number">329</span>,<span class="number">214</span>,<span class="number">319</span>,<span class="number">215</span>,<span class="number">311</span>,<span class="number">215</span>,<span class="number">306</span>,<span class="number">216</span>,<span class="number">296</span>,<span class="number">218</span>,<span class="number">290</span>,<span class="number">221</span>,<span class="number">283</span>,<span class="number">225</span>,<span class="number">282</span>,<span class="number">233</span>,<span class="number">284</span>,<span class="number">238</span>,<span class="number">287</span>,<span class="number">243</span>,<span class="number">290</span>,<span class="number">250</span>,<span class="number">291</span>,<span class="number">255</span>,<span class="number">294</span>,<span class="number">261</span>,<span class="number">293</span>,<span class="number">265</span>,<span class="number">291</span>,<span class="number">271</span>,<span class="number">291</span>,<span class="number">273</span>,<span class="number">289</span>,<span class="number">278</span>,<span class="number">287</span>,<span class="number">279</span>,<span class="number">285</span>,<span class="number">281</span>,<span class="number">280</span>,<span class="number">284</span>,<span class="number">278</span>,<span class="number">284</span>,<span class="number">276</span>,<span class="number">287</span>,<span class="number">277</span>,<span class="number">289</span>,<span class="number">283</span>,<span class="number">291</span>,<span class="number">286</span>,<span class="number">294</span>,<span class="number">291</span>,<span class="number">296</span>,<span class="number">295</span>,<span class="number">299</span>,<span class="number">300</span>,<span class="number">301</span>,<span class="number">304</span>,<span class="number">304</span>,<span class="number">320</span>,<span class="number">305</span>,<span class="number">327</span>,<span class="number">306</span>,<span class="number">332</span>,<span class="number">307</span>,<span class="number">341</span>,<span class="number">306</span>,<span class="number">349</span>,<span class="number">303</span>,<span class="number">354</span>,<span class="number">301</span>,<span class="number">364</span>,<span class="number">301</span>,<span class="number">371</span>,<span class="number">297</span>,<span class="number">375</span>,<span class="number">292</span>,<span class="number">384</span>,<span class="number">291</span>,<span class="number">386</span>,<span class="number">302</span>,<span class="number">393</span>,<span class="number">324</span>,<span class="number">391</span>,<span class="number">333</span>,<span class="number">387</span>,<span class="number">328</span>,<span class="number">375</span>,<span class="number">329</span>,<span class="number">367</span>,<span class="number">329</span>,<span class="number">353</span>,<span class="number">330</span>,<span class="number">341</span>,<span class="number">331</span>,<span class="number">328</span>,<span class="number">336</span>,<span class="number">319</span>,<span class="number">338</span>,<span class="number">310</span>,<span class="number">341</span>,<span class="number">304</span>,<span class="number">341</span>,<span class="number">285</span>,<span class="number">341</span>,<span class="number">278</span>,<span class="number">343</span>,<span class="number">269</span>,<span class="number">344</span>,<span class="number">262</span>,<span class="number">346</span>,<span class="number">259</span>,<span class="number">346</span>,<span class="number">251</span>,<span class="number">349</span>,<span class="number">259</span>,<span class="number">349</span>,<span class="number">264</span>,<span class="number">349</span>,<span class="number">273</span>,<span class="number">349</span>,<span class="number">280</span>,<span class="number">349</span>,<span class="number">288</span>,<span class="number">349</span>,<span class="number">295</span>,<span class="number">349</span>,<span class="number">298</span>,<span class="number">354</span>,<span class="number">293</span>,<span class="number">356</span>,<span class="number">286</span>,<span class="number">354</span>,<span class="number">279</span>,<span class="number">352</span>,<span class="number">268</span>,<span class="number">352</span>,<span class="number">257</span>,<span class="number">351</span>,<span class="number">249</span>,<span class="number">350</span>,<span class="number">234</span>,<span class="number">351</span>,<span class="number">211</span>,<span class="number">352</span>,<span class="number">197</span>,<span class="number">354</span>,<span class="number">185</span>,<span class="number">353</span>,<span class="number">171</span>,<span class="number">351</span>,<span class="number">154</span>,<span class="number">348</span>,<span class="number">147</span>,<span class="number">342</span>,<span class="number">137</span>,<span class="number">339</span>,<span class="number">132</span>,<span class="number">330</span>,<span class="number">122</span>,<span class="number">327</span>,<span class="number">120</span>,<span class="number">314</span>,<span class="number">116</span>,<span class="number">304</span>,<span class="number">117</span>,<span class="number">293</span>,<span class="number">118</span>,<span class="number">284</span>,<span class="number">118</span>,<span class="number">281</span>,<span class="number">122</span>,<span class="number">275</span>,<span class="number">128</span>,<span class="number">265</span>,<span class="number">129</span>,<span class="number">257</span>,<span class="number">131</span>,<span class="number">244</span>,<span class="number">133</span>,<span class="number">239</span>,<span class="number">134</span>,<span class="number">228</span>,<span class="number">136</span>,<span class="number">221</span>,<span class="number">137</span>,<span class="number">214</span>,<span class="number">138</span>,<span class="number">209</span>,<span class="number">135</span>,<span class="number">201</span>,<span class="number">132</span>,<span class="number">192</span>,<span class="number">130</span>,<span class="number">184</span>,<span class="number">131</span>,<span class="number">175</span>,<span class="number">129</span>,<span class="number">170</span>,<span class="number">131</span>,<span class="number">159</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">134</span>,<span class="number">160</span>,<span class="number">130</span>,<span class="number">170</span>,<span class="number">125</span>,<span class="number">176</span>,<span class="number">114</span>,<span class="number">176</span>,<span class="number">102</span>,<span class="number">173</span>,<span class="number">103</span>,<span class="number">172</span>,<span class="number">108</span>,<span class="number">171</span>,<span class="number">111</span>,<span class="number">163</span>,<span class="number">115</span>,<span class="number">156</span>,<span class="number">116</span>,<span class="number">149</span>,<span class="number">117</span>,<span class="number">142</span>,<span class="number">116</span>,<span class="number">136</span>,<span class="number">115</span>,<span class="number">129</span>,<span class="number">115</span>,<span class="number">124</span>,<span class="number">115</span>,<span class="number">120</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">117</span>,<span class="number">113</span>,<span class="number">120</span>,<span class="number">109</span>,<span class="number">122</span>,<span class="number">102</span>,<span class="number">122</span>,<span class="number">100</span>,<span class="number">121</span>,<span class="number">95</span>,<span class="number">121</span>,<span class="number">89</span>,<span class="number">115</span>,<span class="number">87</span>,<span class="number">110</span>,<span class="number">82</span>,<span class="number">109</span>,<span class="number">84</span>,<span class="number">118</span>,<span class="number">89</span>,<span class="number">123</span>,<span class="number">93</span>,<span class="number">129</span>,<span class="number">100</span>,<span class="number">130</span>,<span class="number">108</span>,<span class="number">132</span>,<span class="number">110</span>,<span class="number">133</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">107</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">140</span>,<span class="number">95</span>,<span class="number">138</span>,<span class="number">86</span>,<span class="number">141</span>,<span class="number">79</span>,<span class="number">149</span>,<span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">90</span>,<span class="number">165</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">109</span>,<span class="number">171</span>,<span class="number">107</span>,<span class="number">161</span>,<span class="number">111</span>,<span class="number">156</span>,<span class="number">113</span>,<span class="number">170</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">118</span>,<span class="number">208</span>,<span class="number">117</span>,<span class="number">223</span>,<span class="number">121</span>,<span class="number">239</span>,<span class="number">128</span>,<span class="number">251</span>,<span class="number">133</span>,<span class="number">259</span>,<span class="number">136</span>,<span class="number">266</span>,<span class="number">139</span>,<span class="number">276</span>,<span class="number">143</span>,<span class="number">290</span>,<span class="number">148</span>,<span class="number">310</span>,<span class="number">151</span>,<span class="number">332</span>,<span class="number">155</span>,<span class="number">348</span>,<span class="number">156</span>,<span class="number">353</span>,<span class="number">153</span>,<span class="number">366</span>,<span class="number">149</span>,<span class="number">379</span>,<span class="number">147</span>,<span class="number">394</span>,<span class="number">146</span>,<span class="number">399</span>]</span><br><span class="line">second = [<span class="number">156</span>,<span class="number">141</span>,<span class="number">165</span>,<span class="number">135</span>,<span class="number">169</span>,<span class="number">131</span>,<span class="number">176</span>,<span class="number">130</span>,<span class="number">187</span>,<span class="number">134</span>,<span class="number">191</span>,<span class="number">140</span>,<span class="number">191</span>,<span class="number">146</span>,<span class="number">186</span>,<span class="number">150</span>,<span class="number">179</span>,<span class="number">155</span>,<span class="number">175</span>,<span class="number">157</span>,<span class="number">168</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">157</span>,<span class="number">159</span>,<span class="number">157</span>,<span class="number">158</span>,<span class="number">164</span>,<span class="number">159</span>,<span class="number">175</span>,<span class="number">159</span>,<span class="number">181</span>,<span class="number">157</span>,<span class="number">191</span>,<span class="number">154</span>,<span class="number">197</span>,<span class="number">153</span>,<span class="number">205</span>,<span class="number">153</span>,<span class="number">210</span>,<span class="number">152</span>,<span class="number">212</span>,<span class="number">147</span>,<span class="number">215</span>,<span class="number">146</span>,<span class="number">218</span>,<span class="number">143</span>,<span class="number">220</span>,<span class="number">132</span>,<span class="number">220</span>,<span class="number">125</span>,<span class="number">217</span>,<span class="number">119</span>,<span class="number">209</span>,<span class="number">116</span>,<span class="number">196</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">114</span>,<span class="number">172</span>,<span class="number">114</span>,<span class="number">167</span>,<span class="number">112</span>,<span class="number">161</span>,<span class="number">109</span>,<span class="number">165</span>,<span class="number">107</span>,<span class="number">170</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">89</span>,<span class="number">164</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">148</span>,<span class="number">87</span>,<span class="number">140</span>,<span class="number">96</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">141</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">111</span>,<span class="number">126</span>,<span class="number">113</span>,<span class="number">129</span>,<span class="number">118</span>,<span class="number">117</span>,<span class="number">128</span>,<span class="number">114</span>,<span class="number">137</span>,<span class="number">115</span>,<span class="number">146</span>,<span class="number">114</span>,<span class="number">155</span>,<span class="number">115</span>,<span class="number">158</span>,<span class="number">121</span>,<span class="number">157</span>,<span class="number">128</span>,<span class="number">156</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">136</span>,<span class="number">156</span>,<span class="number">136</span>]</span><br><span class="line"></span><br><span class="line">lineone = <span class="built_in">zip</span>(first[<span class="number">0</span>::<span class="number">2</span>],first[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line">linetwo = <span class="built_in">zip</span>(second[<span class="number">0</span>::<span class="number">2</span>],second[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">turtle.up()</span><br><span class="line">turtle.goto(lineone[<span class="number">0</span>])</span><br><span class="line">turtle.pd()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lineone:</span><br><span class="line">	turtle.goto(x)</span><br><span class="line"></span><br><span class="line">turtle.up()</span><br><span class="line">turtle.goto(linetwo[<span class="number">0</span>])</span><br><span class="line">turtle.pd()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> linetwo:</span><br><span class="line">	turtle.goto(x)</span><br></pre></td></tr></table></figure>

<p>可以看到画出来的是一头牛。。。然后就逐个试那几个可以表示牛的单词。。发现最终是<strong>bull</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-10</title>
    <url>/2015/01/cl0rhzowm001a72q1fgskfbwt/</url>
    <content><![CDATA[<p><em>Python找规律</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/bull.html</a></p>
<p>这一关就是一个找规律然后写数字的题，没有什么难度，唯一蛋疼的就是那个找规律。。。其实我看了半天没看出他的规律是什么，然后就度娘了，发现其实就是一个简单的字符统计。然后问数列中第31个元素的长度，这个就很水了，随便写一个字符统计，循环调用然后添加进列表作为下一个的输入就ok了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nextnum</span>(<span class="params">num</span>):</span><br><span class="line">	temp = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">	result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	counter = <span class="number">0</span></span><br><span class="line">	str_num = <span class="built_in">str</span>(num)</span><br><span class="line">	<span class="keyword">for</span> ch <span class="keyword">in</span> str_num:</span><br><span class="line">		<span class="keyword">if</span> ch != temp:</span><br><span class="line">			result += <span class="built_in">str</span>(counter)</span><br><span class="line">			result += temp</span><br><span class="line">			temp = ch</span><br><span class="line">			counter = <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			counter += <span class="number">1</span></span><br><span class="line">	result += <span class="built_in">str</span>(counter)</span><br><span class="line">	result += temp</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(result)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line">	lst.append(nextnum(lst[x]))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(<span class="built_in">str</span>(lst[<span class="number">30</span>]))</span><br></pre></td></tr></table></figure>

<p>最后得到的答案是：<strong>5808</strong></p>
<p>（不禁想弱弱的黑一下C，这样的问题就蛋疼了吧。233333，人生苦短，我用Python）</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-11</title>
    <url>/2015/01/cl0rhzowo001d72q10kdgeg2x/</url>
    <content><![CDATA[<p><em>Python PIL图像处理</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/5808.html</a></p>
<p>这一关也比较简单，只有一张图片的话毫无疑问就是得对图片下手了，看到上面唯一的提示是和奇偶有关。</p>
<p>那么怎么把图片和奇偶结合起来呢？不用问肯定是像素上下文章。那么就得先看一下像素的排列关系了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;data.out&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;cave.jpg&#x27;</span>)</span><br><span class="line">w, h = im.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(h):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> xrange(w):</span><br><span class="line">		p = (j,i)</span><br><span class="line">		fp.write(<span class="built_in">str</span>(im.getpixel(p)))</span><br><span class="line">	fp.write(<span class="string">&#x27;\\n&#x27;</span>)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<p>这样就能把每一个像素点的信息写在这个data.out的文件里了，用文本编辑器打开一看立刻就知道是怎么回事了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(0, 20, 0)(142, 180, 105)(0, 20, 0)(139, 177, 100)(0, 20, 0)(143, 180, 103)(0, 20, 0)(138, 175, 98)(0, 19, 0)(153, 186, 115)(0, 18, 0)(151, 183, 116)</span><br><span class="line">(148, 186, 111)(0, 20, 0)(148, 186, 109)(0, 21, 0)(144, 181, 104)(0, 20, 0)(144, 181, 104)(0, 20, 0)(146, 180, 106)(0, 18, 0)(152, 185, 114)(0, 22, 0)</span><br><span class="line">(0, 20, 0)(158, 195, 118)(0, 20, 0)(148, 185, 108)(0, 22, 0)(152, 189, 112)(0, 19, 0)(150, 184, 110)(0, 19, 0)(160, 193, 124)(0, 17, 0)(162, 192, 128)</span><br></pre></td></tr></table></figure>

<p>可以看出来，奇数行的奇数点是无意义的，偶数行的偶数点是无意义的，他们有着不同的G值，也就是绿色值。但是其他的点应该是包含着信息的。</p>
<p>那么我们就应该把这些干扰点去掉来看一下效果，最简单的办法就是用黑色像素点把这些遮盖掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;cave.jpg&#x27;</span>)</span><br><span class="line">w, h = im.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(h):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> xrange(w):</span><br><span class="line">		p = (j,i)</span><br><span class="line">		<span class="keyword">if</span> j % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">				im.putpixel(p,<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">				im.putpixel(p,<span class="number">0</span>)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure>

<p>ok，这一下图片中隐藏的信息全部暴露了。右上角浮现出来的<strong>evil</strong>就是最终的答案。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-12</title>
    <url>/2015/01/cl0rhzowq001g72q10jt5bsbk/</url>
    <content><![CDATA[<p><em>Python文件处理</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/evil.html</a></p>
<p>这一关感觉是提示最少的一关了，还是只有一张图片，先把图片保存下来，发现一个小小的细节，就是这个图片的名字evil1.jpg。很容易想到的就是既然有了1，那么会不会有2和3或者其他的呢？</p>
<p>改一下地址，果然有2。一张图片上有一些字，写的是not .jpg _.gfx。那么就试一下，果然下载回来一个gfx的文件，但是这个文件格式根本不常见，度娘了一下也没有任何头绪，难道说就是设计者随便弄的一个吗？这个就不管了，然后再试试3，是一句话“no more evils”，大概意思就是再没有其他的图片了。再试试4的话发现是一幅无法打开的图片，F12查看资源，发现其实是一个文本文档，里面只有一句话“Bert is evil! go back!”这么看来的话应该是真的没有了，那么现在就该是拿这个evil2.gfx文件开刀了。</p>
<p>用文本编辑器打开发现是二进制文件，这样的话就不太好办了，用Python的终端先读几个字符试试吧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;evil2.gfx&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">sub = fp.read(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span> sub</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;\\xff\\x89G\\x89\\xff\\xd8PIP\\xd8\\xffNFN\\xff\\xe0G8G\\xe0\\x00\\r7\\r\\x00\\x10\\na\\n\\x10J&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实看这个字符串。。。一下子感觉看到了很多熟悉的名字。比如GIF、PNG神马的。还有一个更要命的就是对称！每五个一组的对称！那么稍微处理一下刚才得到的东西：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\xff \\x89 G   \\x89 \\xff</span><br><span class="line">\\xd8 P    I   P    \\xd8</span><br><span class="line">\\xff N    F   N    \\xff</span><br><span class="line">\\xe0 G    8   G    \\xe0</span><br><span class="line">\\x00 \\r   7   \\r   \\x00</span><br><span class="line">\\x10 \\n   a   \\n   \\x10</span><br></pre></td></tr></table></figure>

<p>好了，这个题目基本上没有什么问题了，可以确定这个文件就是几个图片拼起来的，而且是不同格式的图片，一共是五张。中间的三张是PNG、GIF、PNG，那么第一和第四章应该是什么呢？随手把一张jpg拖到文本编辑器里，看到开头的一串都是“FFD8 FFE0 0010”.接下来的工作就简单了，分离呗。纯文件操作了。</p>
<p>需要注意的是这个地方处理的都是二进制的文件，所以写入的时候一定要使用wb模式，不然就有的windows用户哭的了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;evil2.gfx&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = fp.read()</span><br><span class="line"></span><br><span class="line">pic = [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">	temp = <span class="built_in">open</span>(<span class="string">&#x27;%d.%s&#x27;</span> % (x,pic[x]), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">	temp.write(<span class="string">&#x27;&#x27;</span>.join(content[x::<span class="number">5</span>]))</span><br><span class="line">	temp.close()</span><br><span class="line"></span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<p>运行程序，发现输出了5张图片。第一张上是dis，第二张上是pro，第三张是port，第四张文件是损坏的，如果用Windows的图片查看是什么也看不出来的，直接拖到IE里，就能看见图片的内容了。是ional。第五张上面的文字被划掉了，可以不用管，这样的话就得到了最后的答案：<strong>disproportional</strong>.</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-13</title>
    <url>/2015/01/cl0rhzows001k72q161vv07ho/</url>
    <content><![CDATA[<p><em>Python xmlrpclib使用</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p>
<p>这一关从源代码上貌似看不出什么东西来，提示也只有一句：“phone that evil ”。</p>
<p>但是点了一下图片里的5发现打开了一个页面。</p>
<p>其实是返回了一个XML的文件，这一下就知道了，这个server不是一个网页的服务器，应该是一个通过XML调用完成信息交互的服务器。那么问题一下子就好办多了，当时上服务计算课程的时候讲了这样的处理办法，在Python里已经有非常方便的内建的类库了。就是xmlrpclib，这是一个可以作为XML-RPC客户端用的简单的类库。功能也足够强大了。</p>
<p>这一关的话可以就可以只在终端里面进行，可以不用写脚本了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpclib</span><br><span class="line">proxy = xmlrpclib.ServerProxy(<span class="string">&#x27;http://www.pythonchallenge.com/pc/phonebook.php&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>导入标准库并且实例化一个远程的服务对象。</p>
<p>接着就可以用listMethods方法去查看远程的接口了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxy.system.listMethods()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;phone&#x27;, &#x27;system.listMethods&#x27;, &#x27;system.methodHelp&#x27;, &#x27;system.methodSignature&#x27;, &#x27;system.multicall&#x27;, &#x27;system.getCapabilities&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>果然不出所料。。就是一个标准的XML-RPC服务器，有一个可供调用的接口phone，然后就是查询一下这个接口的说明和调用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxy.system.methodHelp(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;Returns the phone of a person&#x27;</span></span><br><span class="line"></span><br><span class="line">proxy.system.methodSignature(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[&#x27;string&#x27;, &#x27;string&#x27;]]</span></span><br></pre></td></tr></table></figure>

<p>接受的参数是字符串，那么问题就好办了，直接调用就ok了，但是新的问题来了，我们该往里面输入什么样的字符串呢？想想这个题目里貌似还有一个条件没有用到，就是一开始的那一个提示，“phone that evil ”。问题来了，这一句话怎么理解。</p>
<p>如果是像我一样刚刚做完第12题的话，一定还记得最后一个不是图片的提示吧：“Bert is evil! go back!”。</p>
<p>好了，这下就没有任何的疑问了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxy.phone(<span class="string">&#x27;Bert&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;555-ITALY&#x27;</span></span><br></pre></td></tr></table></figure>

<p>最终的答案就是<strong>italy</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-14</title>
    <url>/2015/01/cl0rhzowu001o72q1cdha1v93/</url>
    <content><![CDATA[<p><em>Python PIL图像操作</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/italy.html</a></p>
<p>这一关其实也是蛮水的，可以发现给的第二张图片比较有意思，其实是一个10000宽，高为1的图片，很显然是把一个100*100的图片经过了某种方式排列就变成了这样。</p>
<p>最容易想到的排列方式就是顺序排列，但是这个题目显然不会是那么简单，看到它给的另外一个算式的提示100*100 = (100+99+99+98) + (…。问题就变得简单了，如果以前有做过类似的题目应该可以想到那个螺旋形填数就是这样一个规律，这么看的话只用把像素点按这个规律再一次填进去就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;wire.png&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pic = Image.new(im.mode,(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">x = -<span class="number">1</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> xrange(<span class="number">100</span>,<span class="number">0</span>,-<span class="number">2</span>):</span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> xrange(l):</span><br><span class="line">		x += <span class="number">1</span></span><br><span class="line">		pic.putpixel((x,y),im.getpixel((index,<span class="number">0</span>)))</span><br><span class="line">		index += <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> xrange(l - <span class="number">1</span>):</span><br><span class="line">		y += <span class="number">1</span></span><br><span class="line">		pic.putpixel((x,y),im.getpixel((index,<span class="number">0</span>)))</span><br><span class="line">		index += <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> xrange(l - <span class="number">1</span>):</span><br><span class="line">		x -= <span class="number">1</span></span><br><span class="line">		pic.putpixel((x,y),im.getpixel((index,<span class="number">0</span>)))</span><br><span class="line">		index += <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> xrange(l - <span class="number">2</span>):</span><br><span class="line">		y -= <span class="number">1</span></span><br><span class="line">		pic.putpixel((x,y),im.getpixel((index,<span class="number">0</span>)))</span><br><span class="line">		index += <span class="number">1</span></span><br><span class="line">pic.save(<span class="string">&#x27;pic.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我是用纯模拟写的，代码比较丑陋一些，但是不妨碍得出正确的结果~最后生成的一张图片是一只猫。那么过关的地址不言而喻了。cat。</p>
<p>但是输入cat之后，进入的页面并不是下一个题的，是这只猫的照片以及一句话，“and its name is uzi. you’ll hear from him later.”</p>
<p>那么下一关的地址就是<strong>uzi</strong>了。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-15</title>
    <url>/2015/01/cl0rhzoww001s72q14xlheift/</url>
    <content><![CDATA[<p><em>Python datetime模块</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/uzi.html</a></p>
<p>其实本来今天不想继续做了的，结果发现这一关。。真的是一大水关，所以就决定做完这一关。</p>
<p>一看这个日历就知道是要求年份，果断是datetime库，需要注意的一点可能就是从右下角可以看出2月有29天，那么我们需要找的就是最后一位年份的数字是6，而且是闰年的年份。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> xrange(<span class="number">1996</span>,<span class="number">1000</span>,-<span class="number">20</span>):</span><br><span class="line">	<span class="keyword">if</span> date(year,<span class="number">1</span>,<span class="number">1</span>).isoweekday() == <span class="number">4</span>:</span><br><span class="line">		<span class="built_in">print</span> year,</span><br></pre></td></tr></table></figure>

<p>符合条件最近的是1996，由于是闰年所以步长可以设置为-20.</p>
<p>1976 1756 1576 1356 1176</p>
<p>最后得到的结果就是这些数字。</p>
<p>看源码，里面有一句提示“he ain’t the youngest, he is the second ”。那么我们需要的年份就是1756了。</p>
<p>但是这个不是最后的答案。</p>
<p>这个题目的标题是whom，那么答案应该是和一个人有关，而且还有一点很重要的就是还有一个提示信息没有用。</p>
<p>“todo: buy flowers for tomorrow”</p>
<p>而日历里圈出来的日期是1月26号。</p>
<p>综合这些信息，就可以知道，我们需要得到一个人的信息，而1756-1-27是与这个人相关的日期。</p>
<p>百度一下，莫扎特诞生于1756-1-27.那么最后的答案就是<strong>mozart</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-16</title>
    <url>/2015/01/cl0rhzowy001w72q14jvjh9d5/</url>
    <content><![CDATA[<p><em>PIL 图像处理</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/mozart.html</a></p>
<p>这一关还是只有一张图片，一样的套路。先看源代码，发现一句提示“let me get this straight”。</p>
<p>它要得到一条直线，这样的话再看这张图片问题就变得似乎不那么难了，因为图片里有很多的粉红色的短横线，而且基本可以看出是每一行只有一段，放大图像可以看到每个短横线是5个像素，然后由两个白色的像素点包着。</p>
<p>那么我们需要做的就是把这些短横线对齐。看看会出现什么样的效果。</p>
<p>首先得确定这个短横线像素的表示方法。</p>
<p>在终端里用mode方法可以知道这张图片是P模式。这个就比较讨厌了，因为P模式是每张图片有一个色表，然后每个像素点的颜色用一个数字来代替，对应色表里的一个颜色，所以我们现在想知道这个紫色的横线到底是什么颜色的，我用的是最笨的办法就是如果相邻5个格颜色一样就输出这个颜色，取了众数就得到了195.</p>
<p>剩下的任务就简单了，用一个列表储存每一个紫色横线开始的像素点的坐标，然后再新的图像里统一填充到一个y坐标上就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;mozart.gif&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">w, h = im.size</span><br><span class="line"></span><br><span class="line">po = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> xrange(h):</span><br><span class="line">	<span class="keyword">for</span> b <span class="keyword">in</span> xrange(w - <span class="number">5</span>):</span><br><span class="line">		<span class="keyword">if</span> im.getpixel((b,a)) == im.getpixel((b + <span class="number">4</span>,a)) == <span class="number">195</span>:</span><br><span class="line">			po.append((b,a))</span><br><span class="line"></span><br><span class="line">out = Image.new(im.mode,(w * <span class="number">2</span>, h), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> po:</span><br><span class="line">	st = w - item[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> xrange(w):</span><br><span class="line">		out.putpixel((st + _, item[<span class="number">1</span>]), im.getpixel((_, item[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line">out.save(<span class="string">&#x27;out.gif&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这样就可以得到最终的结果了。。。因为色表的原因，现在这个新的图像是是黑白的，但是这并不影响我们辨认里面的提示，得到下一关的地址：<strong>romance</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-17</title>
    <url>/2015/01/cl0rhzox0002072q19cipdjfa/</url>
    <content><![CDATA[<p><em>Python urllib和cookielib模块</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/romance.html</a></p>
<p>这一关应该说是做了这么久最蛋疼的一关了吧。。。</p>
<p>真的是非常的冗长，不说别的。。一看图就知道是什么了，cookies。</p>
<p>F12然后刷新页面，在cookie里看到了一行字：info=you+should+have+followed+busynothing…</p>
<p>然后再看看下面的配图。。是第四关的配图，那么就只好去第四关看看cookie是什么了。</p>
<p>在这个页面<a href="http://www.pythonchallenge.com/pc/def/linkedlist.php%E4%B8%8A%EF%BC%8Ccookie%E8%BF%98%E6%98%AF%E6%B2%A1%E6%9C%89%E5%8F%98%E3%80%82">http://www.pythonchallenge.com/pc/def/linkedlist.php上，cookie还是没有变。</a></p>
<p>刚才的提示是followed busynothing。所以把上面的url改一下<a href="http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=12345">http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=12345</a> 看看发生了什么。</p>
<p>Response cookie出现了值，是一个字母，然后当你继续访问的时候，字母在变。</p>
<p>这下好办了，收集这些值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"></span><br><span class="line">jar = cookielib.CookieJar()</span><br><span class="line">handler = urllib2.HTTPCookieProcessor(jar)</span><br><span class="line">opener = urllib2.build_opener(handler)</span><br><span class="line"></span><br><span class="line">baseurl = <span class="string">&#x27;http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=&#x27;</span></span><br><span class="line">num = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"></span><br><span class="line">info = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">118</span>):</span><br><span class="line">	content = opener.<span class="built_in">open</span>(baseurl + num).read()</span><br><span class="line">	num = content.split()[-<span class="number">1</span>]</span><br><span class="line">	info.append(jar._cookies.values()[<span class="number">0</span>][<span class="string">&#x27;/&#x27;</span>][<span class="string">&#x27;info&#x27;</span>].value)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(info)</span><br></pre></td></tr></table></figure>

<p>输出的是一大段字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BZh91AY%26SY%94%3A%E2I%00%00%21%19%80P%81%11%00%AFg%9E%A0+%00hE%3DM%B5%23%D0%D4%D1%E2%8D%06%A9%FA%26S%D4%D3%21%A1%EAi7h%9B%9A%2B%BF%60%22%C5WX%E1%ADL%80%E8V%3C%C6%A8%DBH%2632%18%A8x%01%08%21%8DS%0B%C8%AF%96KO%CA2%B0%F1%BD%1Du%A0%86%05%92s%B0%92%C4Bc%F1w%24S%85%09%09C%AE%24%90</span><br></pre></td></tr></table></figure>

<p>一看就是经过转意的，那么就得转回来。在urllib库里有相应的转意函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">message = <span class="string">&#x27;&#x27;</span>.join(info)</span><br><span class="line">message = urllib.unquote_plus(message)</span><br><span class="line"><span class="built_in">print</span> message</span><br></pre></td></tr></table></figure>


<p>再看看输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;BZh91AY&amp;SY\\x94:\\xe2I\\x00\\x00!\\x19\\x80P\\x81\\x11\\x00\\xafg\\x9e\\xa0\\x00hE=M\\xb5#\\xd0\\xd4\\xd1\\xe2\\x8d\\x06\\xa9\\xfa&amp;S\\xd4\\xd3!\\xa1\\xeai7h\\x9b\\x9a+\\xbf`&quot;\\xc5WX\\xe1\\xadL\\x80\\xe8V&lt;\\xc6\\xa8\\xdbH&amp;32\\x18\\xa8x\\x01\\x08!\\x8dS\\x0b\\xc8\\xaf\\x96KO\\xca2\\xb0\\xf1\\xbd\\x1du\\xa0\\x86\\x05\\x92s\\xb0\\x92\\xc4Bc\\xf1w$S\\x85\\t\\tC\\xae$\\x90&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一种莫名的熟悉感让我想起了之前做过的bz2，于是果断decode。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> message.decode(<span class="string">&#x27;bz2&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果说感觉这就是结果的话。。。真的高兴的有点太早了：</p>
<blockquote><p>is it the 26th already? call his father and inform him that “the flowers are on their way”. he’ll understand.</p>
</blockquote>

<p>这一句话的信息量略微有点大。。。26th是之前那一关的提示。那么这个地方的他指的就是莫扎特了，百度一下莫扎特的父亲是Leopold。</p>
<p>改网站。。404。。还是不对，在看看上面的提示：call his father。</p>
<p>WTF!!</p>
<p>这是又回到打电话的那一关了吗？好吧。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpclib</span><br><span class="line">proxy = xmlrpclib.ServerProxy(<span class="string">&#x27;http://www.pythonchallenge.com/pc/phonebook.php&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> proxy.phone(<span class="string">&#x27;Leopold&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>果然。。。</p>
<p>555-VIOLIN</p>
<p>改地址：出现了这样一个提示：</p>
<blockquote><p>no! i mean yes! but ../stuff/violin.php.</p>
</blockquote>

<p>再改。。好了终于有东西出来了，但是我发现这不是下一个题的地址，因为图片上没有标注题号。。。再看看网页的标题：it’s me. what do you want?</p>
<p>好吧。。。。还有东西不对。。。再回头看看上面的提示。。inform him that “the flowers are on their way”.</p>
<p>也就是说在访问的时候需要给服务器发送这个消息，这一关又主要是cookie，那就是需要构造这样一个cookie然后去访问这个网址了吧。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jar = cookielib.CookieJar()</span><br><span class="line">handler = urllib2.HTTPCookieProcessor(jar)</span><br><span class="line">opener = urllib2.build_opener(handler)</span><br><span class="line">jar._cookies.values()[<span class="number">0</span>][<span class="string">&#x27;/&#x27;</span>][<span class="string">&#x27;info&#x27;</span>].value = <span class="string">&#x27;the+flowers+are+on+their+way&#x27;</span></span><br><span class="line"><span class="built_in">print</span> opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.pythonchallenge.com/pc/stuff/violin.php&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<p>看看返回了什么：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>it&#x27;s me. what do you want?<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;gold&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;leopold.jpg&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">oh well, don&#x27;t you dare to forget the balloons.<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>QAQ。。终于。。。找到答案了。。。<strong>balloons</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-18</title>
    <url>/2015/01/cl0rhzox1002472q14yzw5fe5/</url>
    <content><![CDATA[<p><em>Python difflib</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/return/balloons.html</a></p>
<p>这一关的提示是让你说出两张图片的不同，而且是很基础的不同，那就是亮度了。</p>
<p>改地址：<a href="http://www.pythonchallenge.com/pc/return/brightness.html">http://www.pythonchallenge.com/pc/return/brightness.html</a></p>
<p>然后就可以进到一个完全一样的页面里了，但是源码里的提示变了。</p>
<!-- maybe consider deltas.gz -->

<p>改地址就可以下载到一个deltas的压缩包。里面是一个txt的文件。打开一看很明显文件是被分割成了两部分。而且左右两侧大部分相同，只有个别行是左边有右边没有，或者右边有左边没有。</p>
<p>处理这个问题一下子没有想到太好的办法，就去Python官方文档的标准库页面找思路，ctrl+F了一下deltas。。就出现了一个结果。。是一个叫做difflib的东西，这就没有什么好解释的了吧。。直接查文档，然后发现这个库的作用就是用来找差异的。输入两个片段，然后逐行比较，将差异分为三个类型，两个片段都有，只有第一个片段有和只有第二个片段有。</p>
<p>因为需要两个输入，所以这样的话，最容易想到的，就是先分离文档，将原来的一个文件分为左右两个部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"></span><br><span class="line">src = <span class="built_in">open</span>(<span class="string">&#x27;delta.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dst1 = <span class="built_in">open</span>(<span class="string">&#x27;dst1.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">dst2 = <span class="built_in">open</span>(<span class="string">&#x27;dst2.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> src.readlines():</span><br><span class="line">	dst1.write(line[:<span class="number">53</span>] + <span class="string">&#x27;\\n&#x27;</span>)</span><br><span class="line">	dst2.write(line[<span class="number">56</span>:])</span><br><span class="line"></span><br><span class="line">dst1.close()</span><br><span class="line">dst2.close()</span><br><span class="line">src.close()</span><br></pre></td></tr></table></figure>

<p>这样的话就输出了两个文本文件，把原来的一个分成了两部分，然后紧接着可以想到的就是把它扔到这个库里跑一下看看会出现什么结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sec1 = <span class="built_in">open</span>(<span class="string">&#x27;dst1.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">sec2 = <span class="built_in">open</span>(<span class="string">&#x27;dst2.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">diff = <span class="built_in">open</span>(<span class="string">&#x27;diff.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">text1 = sec1.read().splitlines(<span class="number">1</span>)</span><br><span class="line">text2 = sec2.read().splitlines(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sec1.close()</span><br><span class="line">sec2.close()</span><br><span class="line"></span><br><span class="line">d = difflib.Differ()</span><br><span class="line"></span><br><span class="line">re = <span class="built_in">list</span>(d.compare(text1,text2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> re:</span><br><span class="line">	diff.write(line)</span><br><span class="line"></span><br><span class="line">diff.close()</span><br></pre></td></tr></table></figure>

<p>打开diff.txt看了一下就知道是怎么回事了，发现两个相同的部分，和只有左边有的，以及只有右边有的，都是以“89 50 4e 47 0d 0a 1a 0a 00”这样的串开头的，不禁想到的就是之前那5张图片的那一关，估计手法差不多吧。</p>
<p>百度一下这串数字。。果然是PNG。也就是说这是三幅独立的PNG。那么问题就好办了，分离。</p>
<p>但是特别要提醒的一点。。也是卡了我好久的。。。就是这个文件不是一个二进制文件。。也就意味着分离之后也不是一个png里面的这些数字都是人为搞成16进制的，也就是说这一堆还是acsii。。。擦。。别问我是怎么知道的。。。当我用notepad打开这个文件发现看到的东西和我用sublime打开看到的东西是一样的之后。。。。简直不忍直视。</p>
<p>C的标准库里有一个字符串转数值的，所以用Python也必须有。</p>
<p>翻了翻标准库，果然有一个库是用来干这个事情的。binascii。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> re:</span><br><span class="line">	<span class="keyword">if</span> line[:<span class="number">2</span>] == <span class="string">&#x27;  &#x27;</span>:</span><br><span class="line">		temp1 += line[<span class="number">2</span>:-<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	<span class="keyword">elif</span> line[:<span class="number">2</span>] == <span class="string">&#x27;+ &#x27;</span>:</span><br><span class="line">		temp2 += line[<span class="number">2</span>:-<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	<span class="keyword">elif</span> line[:<span class="number">2</span>] == <span class="string">&#x27;- &#x27;</span>:</span><br><span class="line">		temp3 += line[<span class="number">2</span>:-<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pic1 = <span class="built_in">open</span>(<span class="string">&#x27;pic1.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pic1.write(binascii.unhexlify(temp1))</span><br><span class="line">pic1.close()</span><br><span class="line">pic2 = <span class="built_in">open</span>(<span class="string">&#x27;pic2.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pic2.write(binascii.unhexlify(temp2))</span><br><span class="line">pic2.close()</span><br><span class="line">pic3 = <span class="built_in">open</span>(<span class="string">&#x27;pic3.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pic3.write(binascii.unhexlify(temp3))</span><br><span class="line">pic3.close()</span><br></pre></td></tr></table></figure>

<p>这样的话就分离出三幅图片来。</p>
<p>里面的内容是：</p>
<p>../hex/bin.html</p>
<p>butter</p>
<p>fly</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Challenge攻略-19</title>
    <url>/2015/01/cl0rhzox3002872q1fjbtf1mr/</url>
    <content><![CDATA[<p><em>Python wave 音频处理库</em></p>
<span id="more"></span>

<p>关卡地址：<a href="">http://www.pythonchallenge.com/pc/hex/bin.html</a></p>
<p>又一次看到了Python的强大，真的。</p>
<p>这一关怎么说呢。。。挺无语的。</p>
<p>先看看源码，里面是一个用base64加了密的音频文件。</p>
<p>把源码拷贝出来解密就好。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wav = <span class="built_in">open</span>(<span class="string">&#x27;indian.wav&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">temp = <span class="built_in">open</span>(<span class="string">&#x27;temp&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wav.write(temp.read().decode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line"></span><br><span class="line">wav.close()</span><br><span class="line">temp.close()</span><br></pre></td></tr></table></figure>

<p>然后就可以听这段音频文件了，但是发现很遗憾的是，只能听清楚一个sorry。然后改url发现并不是下一关的地址。</p>
<p>只有一句提示：”what are you apologizing for?”</p>
<p>这个就比较糟糕了。去翻翻Python的标准库。。居然还有处理音频用的库。。想想也是醉了。。还有Python干不了的事情嘛？</p>
<p>于是用这个库打开音频看了一下这个音频的各项属性。</p>
<p>发现对于一个音频主要有这么几个属性：频率、声道数、采样宽度，采样数。</p>
<p>其中很有意思的就是这个采样宽度是以字节计数的，而且是两个字节！！为什么是两个字节。。。又是一个偶数。这是黔驴技穷了的节奏咩？</p>
<p>依旧想到的是。。扒开看看。。</p>
<p>不过因为是音频，所以需要注意的是，扒开的时候音频的时长实际上是缩短了一半，所以频率也得缩短一半，否则就没法听了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"></span><br><span class="line">wav = wave.<span class="built_in">open</span>(<span class="string">&#x27;indian.wav&#x27;</span>)</span><br><span class="line">out1 = wave.<span class="built_in">open</span>(<span class="string">&#x27;out1.wav&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">out2 = wave.<span class="built_in">open</span>(<span class="string">&#x27;out2.wav&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">out1.setparams(wav.getparams())</span><br><span class="line">out2.setparams(wav.getparams())</span><br><span class="line"></span><br><span class="line">out1.setframerate(wav.getframerate() / <span class="number">2</span>)</span><br><span class="line">out2.setframerate(wav.getframerate() / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(wav.getnframes()):</span><br><span class="line">	data = wav.readframes(<span class="number">1</span>)</span><br><span class="line">	out1.writeframes(data[<span class="number">0</span>])</span><br><span class="line">	out2.writeframes(data[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">out1.close()</span><br><span class="line">out2.close()</span><br><span class="line">wav.close()</span><br></pre></td></tr></table></figure>

<p>两个文件，发现第二个文件还是之前听到的声音，但是第一个文件已经变成了可以听到其他内容的东西了。</p>
<p>仔细听就可以听到里面的话是“You are an idiot.”</p>
<p>关键词是idiot。</p>
<p>所以就可以去改地址了，出现的提示是：”Now you should apologize…”</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中两种文件写入方式比较</title>
    <url>/2015/03/cl0rhzox5002c72q12g9odxe0/</url>
    <content><![CDATA[<p><em>有关Python文件写入的相关问题</em></p>
<span id="more"></span>

<p>在python中对一个文件的写入提供了两种方式，一种就是最常规的write方式，还有一种就是使用print&gt;&gt;方式。这两种方式的区别是什么呢？哪一个更快呢？</p>
<p>简单进行一个测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> clock</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speedTest</span>(<span class="params">func</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">_deco</span>():</span><br><span class="line">		startTime = clock()</span><br><span class="line">		func()</span><br><span class="line">		endTime = clock()</span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;Cost time is &quot;</span> + <span class="built_in">str</span>(endTime - startTime)</span><br><span class="line">	<span class="keyword">return</span> _deco</span><br><span class="line"></span><br><span class="line"><span class="meta">@speedTest</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">method1</span>():</span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">		<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1000000</span>):</span><br><span class="line">			fp.write(<span class="string">&quot;Hello world!\\n&quot;</span>)</span><br><span class="line"><span class="meta">@speedTest</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">method2</span>():</span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">		<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1000000</span>):</span><br><span class="line">			<span class="built_in">print</span> &gt;&gt; fp, <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;write method:&quot;</span></span><br><span class="line">method1()</span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&gt;&gt; method:&quot;</span></span><br><span class="line">method2()</span><br></pre></td></tr></table></figure>

<p>最后的结果：</p>
<img src="/2015/03/cl0rhzox5002c72q12g9odxe0/1.png" class="">

<p>显然是write方式更快一点。但是为什么呢？</p>
<p>在python的官方文档里面有这样的一段描述：</p>
<blockquote><p>print also has an extended form, defined by the second portion of the syntax described above. This form is sometimes referred to as “print chevron.” In this form, the first expression after the &gt;&gt; must evaluate to a “file-like” object, specifically an object that has a write() method as described above. With this extended form, the subsequent expressions are printed to this file object. If the first expression evaluates to None, then sys.stdout is used as the file for output.</p>
</blockquote>

<p>可以看出在在使用&gt;&gt;的时候，python会先验证&gt;&gt;后是不是一个None，如果是的话就使用sys.stdout，这样的话多了验证工作所以速度就慢下来了喵~</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>将Python脚本打包为exe文件</title>
    <url>/2015/02/cl0rhzox7002g72q18uul4aan/</url>
    <content><![CDATA[<p><em>简单几步将python脚本打包为exe包</em></p>
<p>第一步：在<a href="https://pypi.python.org/pypi/PyInstaller/2.1">https://pypi.python.org/pypi/PyInstaller/2.1</a> 下载pyinstaller。</p>
<p>第二步：解压缩，在该目录下命令行中执行python setup.py install。</p>
<p>第三步：在需要编译的文件目录中在命令行中执行： pyinstaller filename.py即可。</p>
<p>第四步：在dist文件夹中找到exe文件即可。</p>
<p>注意：务必关闭杀毒软件和卫士等等~否则会报毒。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>段喵教你用20行代码搞定计算方法实验1</title>
    <url>/2015/03/cl0rhzox9002k72q15nzy460s/</url>
    <content><![CDATA[<p>哈工大《计算方法》实验课实验作业</p>
<ul>
<li><p>其实就是想说。。。Python的科学计算库真的很强大。。</p>
</li>
<li><p>其实老师的本意是想让我们自己实现，但是我却调了现成的类库。</p>
</li>
</ul>
<span id="more"></span>

<p>表示已经上了三个星期的计算方法，但是依旧对这门课听的云里雾里。</p>
<p>不过值得一提的是，感觉实验课还是多少有点意思的，想想今早上课的时候老师还在说建议大家用用高级语言来编程完成实验，而不要用matlab，在他看来matlab不能称作一门语言，而是一个软件~~顿时感觉有一点点无语，既然不让用matlab（喂喂，说的好像你会用似的），那么就用我大python来搞定吧。</p>
<p>早有耳闻python非常适合用来做科学计算，没想到真的很方便。我们主要用到的是两个库，一个是numpy还有一个是scipy，其实光看名字也知道是用来干嘛的了。</p>
<p>先上代码，然后再逐行解释一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 引入必要的包</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> lagrange <span class="comment">#看到了吗？拉格朗日就是一个函数</span></span><br><span class="line"><span class="comment"># 下面定义两个列表，一个是题目中给定点的个数，另一个是所求点的x坐标</span></span><br><span class="line">n_list = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">request_list = [-<span class="number">0.95</span>, -<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.95</span>]</span><br><span class="line"><span class="comment"># 题目中的函数表达式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x</span>):</span><br><span class="line">	<span class="keyword">return</span> np.e ** x</span><br><span class="line"><span class="comment"># 打开一个文件用来写入结果</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.3.2.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">	<span class="comment">#遍历列表n_list来完成n种情况的写入</span></span><br><span class="line">	<span class="keyword">for</span> n <span class="keyword">in</span> n_list:</span><br><span class="line">		<span class="comment">#由于一开始题目给出点的x坐标不均匀是一个关于n和k的余弦函数，所以构建一个列表来装这些值</span></span><br><span class="line">		x = []</span><br><span class="line">		<span class="keyword">for</span> k <span class="keyword">in</span> xrange(n + <span class="number">1</span>):</span><br><span class="line">			x.append(np.cos(((<span class="number">2</span> * k + <span class="number">1</span>) * np.pi) / (<span class="number">2</span> * (n + <span class="number">1</span>))))</span><br><span class="line">		<span class="comment"># 构建函数表达式，用numpy内置的array方法把普通的列表转换成float64的数组来提高精确度，此时返回的y是一个相应结果的数组</span></span><br><span class="line">		y = np.e ** np.array(x)</span><br><span class="line">		<span class="comment"># 下面这一行的意思就是用x和y构建一个拉格朗日插值多项式。f就变成了一个可调用的多项式。</span></span><br><span class="line">		f = lagrange(x, y)</span><br><span class="line">		<span class="built_in">print</span>&gt;&gt;fp, n, <span class="string">&#x27;:&#x27;</span></span><br><span class="line">		<span class="comment"># 接下来就是打印结果了</span></span><br><span class="line">		<span class="keyword">for</span> _ <span class="keyword">in</span> request_list:</span><br><span class="line">			true = fun(_)</span><br><span class="line">			inter = f(_)</span><br><span class="line">			<span class="built_in">print</span>&gt;&gt;fp, <span class="string">&#x27;%f: true: %.12f interpolate: %.12f delta: %.12f&#x27;</span> % (_, true, inter, true - inter)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每错就是这么简单~其他几个题目和这个解决方法完全一样，相比之下更简单。换换参数就可以了喵。</p>
<p>老师总不会说python也不是高级语言了吧~~23333</p>
<p>所以说。。。人生苦短，我用python。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>闲的蛋疼系列之那个裙子到底什么颜色</title>
    <url>/2015/02/cl0rhzoxb002o72q1bv890c40/</url>
    <content><![CDATA[<p><em>有关于那条争议很大的裙子颜色问题</em></p>
<p><em>用PIL去做一些简单的分析</em></p>
<p><em>非专业图像处理，可能不是很准确</em></p>
<span id="more"></span>

<img src="/2015/02/cl0rhzoxb002o72q1bv890c40/1.jpg" class="">

<p>没错就是这个货到底是什么颜色？？</p>
<p>各种说法层出不穷，我才不会说我看到的就是白金色的呢，但是。。。。是不是因为所谓周围颜色干扰之类的造成的错觉呢。。。。</p>
<p>实践出真知，截取图中两块同样大小相对颜色稳定的区域然后求出平均颜色来看看~</p>
<p>我截取的区域是(110,190)和(115,320)为起点的90*50的区域，当然，稍微粗略一点，但是基本已经可以看出问题来了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageEnhance</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取区域的宽和高</span></span><br><span class="line">WIDTH = <span class="number">90</span></span><br><span class="line">HEIGHT = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#截取区域的起始坐标</span></span><br><span class="line">BRIGHT_X = <span class="number">110</span></span><br><span class="line">BRIGHT_Y = <span class="number">190</span></span><br><span class="line">DARK_X = <span class="number">115</span></span><br><span class="line">DARK_Y = <span class="number">320</span></span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.jpg&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bright_part = Image.new(im.mode, (WIDTH, HEIGHT), <span class="number">0</span>)</span><br><span class="line">dark_part = Image.new(im.mode, (WIDTH, HEIGHT), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">bright_part.paste(im.crop((BRIGHT_X, BRIGHT_Y, BRIGHT_X + WIDTH, BRIGHT_Y +HEIGHT)), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">dark_part.paste(im.crop((DARK_X, DARK_Y, DARK_X + WIDTH, DARK_Y +HEIGHT)), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">bright_part.save(<span class="string">&#x27;bright.jpg&#x27;</span>)</span><br><span class="line">dark_part.save(<span class="string">&#x27;dark.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2015/02/cl0rhzoxb002o72q1bv890c40/2.jpg" class="">

<img src="/2015/02/cl0rhzoxb002o72q1bv890c40/3.jpg" class="">

<p>（现在看起来那个深色部分真的是有点像灰褐色了，浅色部分真的是浅蓝色）</p>
<p>求平均值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageEnhance</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取区域的宽和高</span></span><br><span class="line">WIDTH = <span class="number">90</span></span><br><span class="line">HEIGHT = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#截取区域的起始坐标</span></span><br><span class="line">BRIGHT_X = <span class="number">110</span></span><br><span class="line">BRIGHT_Y = <span class="number">190</span></span><br><span class="line">DARK_X = <span class="number">115</span></span><br><span class="line">DARK_Y = <span class="number">320</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">lst,order</span>):</span><br><span class="line">	l = [_[order] <span class="keyword">for</span> _ <span class="keyword">in</span> lst]</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sum</span>(l) / <span class="built_in">len</span>(l)</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.jpg&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bright_part = Image.new(im.mode, (WIDTH, HEIGHT), <span class="number">0</span>)</span><br><span class="line">dark_part = Image.new(im.mode, (WIDTH, HEIGHT), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">bright_part.paste(im.crop((BRIGHT_X, BRIGHT_Y, BRIGHT_X + WIDTH, BRIGHT_Y +HEIGHT)), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">dark_part.paste(im.crop((DARK_X, DARK_Y, DARK_X + WIDTH, DARK_Y +HEIGHT)), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">bright_part.save(<span class="string">&#x27;bright.jpg&#x27;</span>)</span><br><span class="line">dark_part.save(<span class="string">&#x27;dark.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bright_data = <span class="built_in">list</span>(bright_part.getdata())</span><br><span class="line">dark_data = <span class="built_in">list</span>(dark_part.getdata())</span><br><span class="line"></span><br><span class="line">average_rgb_of_bright_data = (average(bright_data, <span class="number">0</span>),average(bright_data, <span class="number">1</span>),average(bright_data, <span class="number">2</span>))</span><br><span class="line">average_rgb_of_dark_data = (average(dark_data, <span class="number">0</span>),average(dark_data, <span class="number">1</span>),average(dark_data, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">result = Image.new(im.mode, (<span class="number">400</span>, <span class="number">200</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">result.paste(average_rgb_of_bright_data, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">100</span>))</span><br><span class="line">result.paste(average_rgb_of_dark_data, (<span class="number">0</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">200</span>))</span><br><span class="line">result.save(<span class="string">&#x27;result.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2015/02/cl0rhzoxb002o72q1bv890c40/4.jpg" class="">

<p>因为是在阳光下亮度比较高一点~~</p>
<p>我们稍稍吧亮度降低一点然后再看看效果~</p>
<p>调整亮度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageEnhance</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取区域的宽和高</span></span><br><span class="line">WIDTH = <span class="number">90</span></span><br><span class="line">HEIGHT = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#截取区域的起始坐标</span></span><br><span class="line">BRIGHT_X = <span class="number">110</span></span><br><span class="line">BRIGHT_Y = <span class="number">190</span></span><br><span class="line">DARK_X = <span class="number">115</span></span><br><span class="line">DARK_Y = <span class="number">320</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">lst,order</span>):</span><br><span class="line">	l = [_[order] <span class="keyword">for</span> _ <span class="keyword">in</span> lst]</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sum</span>(l) / <span class="built_in">len</span>(l)</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.jpg&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bright_part = Image.new(im.mode, (WIDTH, HEIGHT), <span class="number">0</span>)</span><br><span class="line">dark_part = Image.new(im.mode, (WIDTH, HEIGHT), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">bright_part.paste(im.crop((BRIGHT_X, BRIGHT_Y, BRIGHT_X + WIDTH, BRIGHT_Y +HEIGHT)), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">dark_part.paste(im.crop((DARK_X, DARK_Y, DARK_X + WIDTH, DARK_Y +HEIGHT)), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">bright_part.save(<span class="string">&#x27;bright.jpg&#x27;</span>)</span><br><span class="line">dark_part.save(<span class="string">&#x27;dark.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bright_data = <span class="built_in">list</span>(bright_part.getdata())</span><br><span class="line">dark_data = <span class="built_in">list</span>(dark_part.getdata())</span><br><span class="line"></span><br><span class="line">average_rgb_of_bright_data = (average(bright_data, <span class="number">0</span>),average(bright_data, <span class="number">1</span>),average(bright_data, <span class="number">2</span>))</span><br><span class="line">average_rgb_of_dark_data = (average(dark_data, <span class="number">0</span>),average(dark_data, <span class="number">1</span>),average(dark_data, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">result = Image.new(im.mode, (<span class="number">400</span>, <span class="number">200</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">result.paste(average_rgb_of_bright_data, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">100</span>))</span><br><span class="line">result.paste(average_rgb_of_dark_data, (<span class="number">0</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">200</span>))</span><br><span class="line">result.save(<span class="string">&#x27;result.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dark_pic = ImageEnhance.Brightness(result).enhance(<span class="number">0.4</span>)</span><br><span class="line">dark_pic.save(<span class="string">&#x27;dark_result.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2015/02/cl0rhzoxb002o72q1bv890c40/5.jpg" class="">

<p>问我刚才在干嘛。。。。看看这篇文章也知道我刚刚从盐缸里爬出来~~XD</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Git Server搭建</title>
    <url>/2016/09/cl0rhzoxc002r72q1afl13cl5/</url>
    <content><![CDATA[<p>以Ubuntu系统为例讲解如何搭建一个git服务器</p>
<p>简单的说步骤如下：</p>
<ul>
<li>安装相关软件</li>
<li>创建用户</li>
<li>创建证书登录</li>
<li>创建仓库</li>
</ul>
<span id="more"></span>

<p>有些时候由于各种原因我们不能使用公共的git服务，所以我们需要自己搭建一个GIT服务器以方便项目合作。</p>
<p>搭建GIT服务器首先需要有一个Linux服务器，这篇文章以Ubuntu环境为例简单讲解该如何搭建一个GIT服务器。</p>
<p>搭建一个GIT服务器大概有这么几个步骤：安装相关软件，创建用户，创建证书登录，创建仓库。</p>
<p>下面详细说说每一步该怎么做：</p>
<p>首先需要安装必须的软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<p>接下来就是为git服务创建一个专用的账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser git</span><br></pre></td></tr></table></figure>

<p>对于用户较少的团队大家可以直接用git账户来拖代码或者推代码，但是这样的做法是不安全的，同时也很难区分作者。</p>
<p>最好的办法可以是让大家都上传自己的公钥，由管理员添加进允许列表，具体是这样做的。</p>
<p>首先需要修改ssh配置，在/etc/ssh/目录下有一个sshd_config的文件。</p>
<p>找到里面有关AuthorizedKeysFile的一行，取消注释，并将后面的路径修改为/home/git/.ssh/authorized_keys</p>
<p>保存后重启ssh服务。</p>
<p>接下来就是可以处理用户登录密钥的问题了。</p>
<p>对于熟悉git shell的用户可以直接使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>命令来生成密钥，然后将生成的.pub文件给管理员即可。对于不熟悉的用户，可以使用带有图形化界面的git软件source tree。在工具中有创建或导入ssh密钥。点击Generate，然后在空白区域移动鼠标即可。待生成完毕之后可以把Key comment里的内容改为自己的名字。将上方框里的Public key给管理员即可。</p>
<p>管理员拿到所有的密钥文件之后将这些密钥文件每个一行添加到之前说的authorized_keys文件中即可。</p>
<p>添加完成后重启。</p>
<p>接下来管理员就可以创建仓库了。</p>
<p>比如/var/git/目录作为git仓库的存储目录，则可以在这里创建空的git项目，比如我们可以通过下面的命令来完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo git init --bare test.git</span><br></pre></td></tr></table></figure>

<p>这样GIT就创建了一个裸仓库，接下来我们把这个仓库的owner改为git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R git:git test.git</span><br></pre></td></tr></table></figure>

<p>这样的话客户端已经可以正常通过clone命令来克隆仓库了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@192.168.1.xxx:/var/git/test.git</span><br></pre></td></tr></table></figure>

<p>然后就可以正常推送和使用了。如果在克隆的时候需要输入密码，那就是因为授权验证的ssh-agent没有将密钥随着请求，可以使用ssh-add命令来添加。</p>
<p>为了方便使用，建议客户端配置git config –global，这样的话git server端就可以很清楚的知道每次提交都是谁提交的了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name yumendy</span><br><span class="line">git config --global user.email yumendy@163.com</span><br></pre></td></tr></table></figure>

<p>这样的话在push代码的时候就可以不用在设置这些信息了。</p>
<p>接下来需要解决的是一个安全性问题，就是需要禁止git用户的shell登录。</p>
<p>我们只需要将/etc/passwd文件里的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure>

<p>后的/bin/bash改为gitshell的路径就可以了。一般是/usr/bin/git-shell</p>
<p>即修改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>

<p>重启。</p>
<p>这样的话一个简易的git版本控制服务端就搭建好了，客户端可以通过图形化界面的source tree完成代码的推送拉取等任务。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多进程编程中进程池锁共享问题</title>
    <url>/2016/08/cl0rhzoxf002w72q14f6f46cx/</url>
    <content><![CDATA[<p>Python多进程编程中，资源锁的问题</p>
<p>进程池可以使我们的编程变得非常简单，但是同时进程池的使用也会造成一些麻烦，比如对于共用锁的处理等。</p>
<p>这篇文章主要通过两种方法解决共享资源锁的问题：</p>
<ul>
<li>通过Manager对象</li>
<li>通过初始化时传递</li>
</ul>
<span id="more"></span>

<p>python多进程编程使用进程池非常的方便管理进程，但是有时候子进程之间会抢占一些独占资源，比如consol或者比如日志文件的写入权限，这样的时候我们一般需要共享一个Lock来对独占资源加锁。lock作为一个不可直接打包的资源是没有办法作为一个参数直接给Pool的map方法里的函数传参的。为了解决这个问题，有两种解决方法，一种是使用多进程的管理器Manager()，并使用偏函数的办法传递对象Manager.Lock()。第二种是在进程池创建时传递multiprocessing.Lock()对象。</p>
<p>下面以一个具体的栗子来说明。</p>
<p>比如我现在有一个数据列表我想通过多进程的方式将里面的数据发送到指定的API并且在日志文件中记录每次请求所用的时间。</p>
<p>我们最容易想到的解决办法就是把锁作为一个参数传进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, Lock</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> clock</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">lock, data</span>):</span><br><span class="line">	api_url = <span class="string">&#x27;http://api.xxxx.com/?data=%s&#x27;</span></span><br><span class="line">	start_time = clock()</span><br><span class="line">	<span class="built_in">print</span> urllib2.urlopen(api_url % data).read()</span><br><span class="line">	end_time = clock()</span><br><span class="line">	lock.acquire()</span><br><span class="line">	whit <span class="built_in">open</span>(<span class="string">&#x27;request.log&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> logs:</span><br><span class="line">		logs.write(<span class="string">&#x27;request %s cost: %s\</span></span><br><span class="line"><span class="string">&#x27;</span> % (data, end_time - start_time))</span><br><span class="line">	lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	data_list = [<span class="string">&#x27;data1&#x27;</span>, <span class="string">&#x27;data2&#x27;</span>, <span class="string">&#x27;data3&#x27;</span>]</span><br><span class="line">	pool = Pool(<span class="number">8</span>)</span><br><span class="line">	lock = Lock()</span><br><span class="line">	partial_send_request(send_request, lock=lock)</span><br><span class="line">	pool.<span class="built_in">map</span>(partial_send_request, data_list)</span><br><span class="line">	pool.close()</span><br><span class="line">	pool.join()</span><br></pre></td></tr></table></figure>

<p>在这样的情况下，lock作为一个不可直接打包的资源是没有办法作为一个参数直接给Pool的map方法里的函数传参的。</p>
<p>会出现一个运行时错误：</p>
<blockquote><p>Runtime Error: Lock objects should only be shared between processes through inheritance.</p>
</blockquote>

<p>根据一开始的思路我们可以把代码改成下面的样子：</p>
<p>第一种思路，使用Manager。</p>
<p>send_request函数不用改变，只改变main中的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">	data_list = [<span class="string">&#x27;data1&#x27;</span>, <span class="string">&#x27;data2&#x27;</span>, <span class="string">&#x27;data3&#x27;</span>]</span><br><span class="line">	pool = Pool(<span class="number">8</span>)</span><br><span class="line">	manager = Manager()</span><br><span class="line">	lock = manager.Lock()</span><br><span class="line">	partial_send_request(send_request, lock=lock)</span><br><span class="line">	pool.<span class="built_in">map</span>(partial_send_request, data_list)</span><br><span class="line">	pool.close()</span><br><span class="line">	pool.join()</span><br></pre></td></tr></table></figure>

<p>这是第一种方法，但是对于仅仅需要一个日志写入锁就用一个Manager显的十分重了。这种方式其实是需要一个专门的进程去处理Manager服务。所有的加锁和释放锁的操作都是通过IPC传递给Manager服务的。</p>
<p>第二种解决思路就是通过initializer参数在Pool对象创建时传递Lock对象。这种方式将Lock对象变为了所有子进程的全局对象。</p>
<p>代码可以作如下修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">data</span>):</span><br><span class="line">	api_url = <span class="string">&#x27;http://api.xxxx.com/?data=%s&#x27;</span></span><br><span class="line">	start_time = clock()</span><br><span class="line">	<span class="built_in">print</span> urllib2.urlopen(api_url % data).read()</span><br><span class="line">	end_time = clock()</span><br><span class="line">	lock.acquire()</span><br><span class="line">	whit <span class="built_in">open</span>(<span class="string">&#x27;request.log&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> logs:</span><br><span class="line">		logs.write(<span class="string">&#x27;request %s cost: %s\n&#x27;</span> % (data, end_time - start_time))</span><br><span class="line">	lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">l</span>):</span><br><span class="line">	<span class="keyword">global</span> lock</span><br><span class="line">	lock = l</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	data_list = [<span class="string">&#x27;data1&#x27;</span>, <span class="string">&#x27;data2&#x27;</span>, <span class="string">&#x27;data3&#x27;</span>]</span><br><span class="line">	lock = Lock()</span><br><span class="line">	pool = Pool(<span class="number">8</span>, initializer=init, initargs=(lock,))</span><br><span class="line">	pool.<span class="built_in">map</span>(send_request, data_list)</span><br><span class="line">	pool.close()</span><br><span class="line">	pool.join()</span><br></pre></td></tr></table></figure>

<p>这样的修改就没有使用偏函数的必要了。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>京东评论爬虫一则</title>
    <url>/2016/11/cl0rhzoxg002z72q12ly27qcn/</url>
    <content><![CDATA[<p>双十一又要来了，为剁手党萌做了一点微小的事情</p>
<ul>
<li>涉及最简单的页面分析</li>
<li>简单的多进程编程</li>
</ul>
<span id="more"></span>

<p>转眼又到了双十一，分享一个之前爬京东商品评论的爬虫，为剁手党萌提供一些微小的帮助。</p>
<p>每每想到要在网上购买商品，第一个想到的就是要去看看买家们怎么说，但是难以避免的，在页面上一次只能看到10条评论，频繁的翻页操作真的是好麻烦。再者有时候对于（没钱的我）[划掉]选择困难症患者来说总有这么一个闹心事，比如我想买一部手机，我同时看好水果牌的某一款，我也看好大菊花的某两款，我还看好大法的某一款，那么当我逐一看某一款的评论时，都会给我一个感觉“哇，好棒，买买买。”相反在现实里，小伙伴们一起讨论的话就会是另外一番场景了：A：“水果好看。”B：“支持国产。”C：“坚定信仰。”A：“水果做工好。”B：“我用麒麟。”C：“坚定信仰。”通过这样的交替看评论，反而能使人更客观一点。但是我们在一个京东的页面里面显然是不可能看见友商竞品的评论了。我们总不能开好几个标签手动看吧。鉴于此，这点小事是难不倒程序猿的。写个爬虫存起来，想怎么看就怎么看<em>(:зゝ∠)</em></p>
<p>说干就干，必然还是人生苦短我用python。</p>
<p>第一步必然是分析页面，随时打开一个评论页面，比如以<code>http://item.jd.com/3717578.html</code>这个地址为例。在第一条评论的位置右键审查元素，可以看到这样的信息：</p>
<img src="/2016/11/cl0rhzoxg002z72q12ly27qcn/1.png" class="">

<p>发现很明显，所有的评论内容都是在一个类为<code>p-comment</code>的div中。随手在下面的console中敲一下<code>$(&#39;.p-comment&#39;)</code>一看返回结果刚好是10条评论的数组。一看到这个，不由的让人想到，这下好办了pyquery几乎可以不费什么功夫就把所有的内容抓到了。</p>
<p>但是根据我的经验，这样的页面一般评论都是异步加载的，可能会有更简单的办法来处理这件事情。比如挖掘一下有没有评论接口什么的。戳回商品信息页面，在Chrome的Developer Tools的Network标签里禁用缓存，刷新页面然后戳一下商品评论，发现又发起了81个请求，那么很有可能评论就藏在这里面。在filter中选择XHR发现居然是空的，那么评论没有直接使用json传回来，一定被藏起来了。这样真的是有点不太友好哇<em>(:зゝ∠)</em></p>
<p>不过这样的事情难不倒段喵喵，把filter切到js看看这些请求回来的js有没有什么异常。为嘛会想到js呢。对于这个问题可以去查一下JSON到底是什么。往下翻几个就看到了一个请求名字是<code>productPageComments.action</code>戳开一看果然是一个函数调用包着一个大的json。那么我们要找的json就在这里了，可是还得处理一下外面这一层。看起来似乎不太好办，但是再回头看一眼这个请求本身最后带着一个查询参数是<code>callback=fetchJSON_comment98vv2125</code>发现和respose中包着这个json的函数调用名字一样。这样的话，如果我们把这个参数去掉发一个请求试试。</p>
<p>一个完整的JSON文件get√，看看上面的查询参数，我们只要修改对于的productId就可以得到不同商品的评论了，当然还有page和pageSize参数。分别是评论的第几页和每页的评论数。但是不知道为嘛这个pageSize参数是个咸鱼，不管你填多少都只能拿到10条评论。</p>
<p>接下来的事情简单了，分析一下json文件，先格式化了，然后简单折叠一下。就可以看到这样的结构了：</p>
<img src="/2016/11/cl0rhzoxg002z72q12ly27qcn/2.png" class="">

<p><code>productCommentSummary</code>是产品评论总结，里面有一些好评率，评论总数之类的东西，<code>hotCommentTagStatistics</code>标签信息，<code>maxPage</code>最大页码数，<code>comments</code>评论列表。</p>
<p>剩下的内容就无比简单了，urllib2和json两个包的使用，为了效率高可以用multiprocessing多进程处理，为了容错和高效维护数据，内容直接写入MySQL就OK了。</p>
<p>多的不用说了，直接上代码了w</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="comment"># db config</span></span><br><span class="line">HOST = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">DB = <span class="string">&#x27;jd_comment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># project config</span></span><br><span class="line"></span><br><span class="line">MAX_PAGE = <span class="number">9999</span></span><br><span class="line">PROCESS_NUM = <span class="number">8</span></span><br><span class="line">product_id_list = [<span class="number">3717578</span>, <span class="number">1856584</span>, <span class="number">3110721</span>, <span class="number">2473905</span>, <span class="number">2978567</span>, <span class="number">3742076</span>, <span class="number">2777805</span>, <span class="number">1750526</span>, <span class="number">10429992152</span>, <span class="number">2203531</span>]</span><br><span class="line"></span><br><span class="line">_url_template = <span class="string">&#x27;http://sclub.jd.com/comment/productPageComments.action?productId=%s&amp;score=0&amp;sortType=3&amp;page=%s&amp;pageSize=10&#x27;</span></span><br><span class="line">_sql_template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">INSERT INTO items(product_id, product_name, score, content) VALUES (%s, %s, %s, %s);</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">con = MySQLdb.connect(host=HOST, port=PORT, user=USERNAME, passwd=PASSWORD, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line">con.select_db(DB)</span><br><span class="line"></span><br><span class="line">err = <span class="built_in">open</span>(<span class="string">&#x27;err.log&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_project_comments_by_id</span>(<span class="params">project_id</span>):</span><br><span class="line">    first_page_data = get_page(<span class="number">0</span>, project_id)</span><br><span class="line">    total_pages = first_page_data.get(<span class="string">&#x27;maxPage&#x27;</span>, <span class="number">1</span>) <span class="keyword">if</span> first_page_data.get(<span class="string">&#x27;maxPage&#x27;</span>, <span class="number">1</span>) &lt; MAX_PAGE <span class="keyword">else</span> MAX_PAGE</span><br><span class="line">    save_page_to_db(first_page_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page_number <span class="keyword">in</span> xrange(<span class="number">1</span>, total_pages):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = get_page(page_number, project_id)</span><br><span class="line">            save_page_to_db(data)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span> &gt;&gt; err, e</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_page_to_db</span>(<span class="params">data</span>):</span><br><span class="line">    comments_list = get_comments_list(data)</span><br><span class="line">    save_comments_list_to_db(comments_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">page_number, project_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> json.load(urllib2.urlopen(_url_template % (project_id, page_number)), encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> &gt;&gt; err, e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_comments_list</span>(<span class="params">data</span>):</span><br><span class="line">    comments_list = data.get(<span class="string">&#x27;comments&#x27;</span>, [])</span><br><span class="line">    <span class="keyword">return</span> [[item.get(<span class="string">&#x27;referenceId&#x27;</span>, <span class="string">&#x27;&#x27;</span>), item.get(<span class="string">&#x27;referenceName&#x27;</span>, <span class="string">&#x27;&#x27;</span>), item.get(<span class="string">&#x27;score&#x27;</span>, <span class="number">0</span>), item.get(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;&#x27;</span>)]</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> comments_list]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_comments_list_to_db</span>(<span class="params">comments_list</span>):</span><br><span class="line">    <span class="built_in">map</span>(save_to_db, comments_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_db</span>(<span class="params">args_list</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sql = _sql_template % <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="string">&quot;\\&#x27;%s\\&#x27;&quot;</span> % x, args_list))</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        con.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> &gt;&gt; err, e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        processing_pool = Pool(PROCESS_NUM)</span><br><span class="line">        processing_pool.<span class="built_in">map</span>(get_project_comments_by_id, product_id_list)</span><br><span class="line">        processing_pool.close()</span><br><span class="line">        processing_pool.join()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> &gt;&gt; err, e</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close()</span><br><span class="line">        con.close()</span><br><span class="line">        err.close()</span><br></pre></td></tr></table></figure>

<p>代码放在GITHUB上，如果你觉得不错的话，欢迎点赞投喂w</p>
<p><a href="">https://github.com/yumendy/jd_comments_spyder</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nginx+uwsgi部署django应用</title>
    <url>/2016/08/cl0rhzoxi003472q17t1q2prx/</url>
    <content><![CDATA[<p>简单明了的说明如何在Linux下部署一个Django应用</p>
<ul>
<li>这篇文章好像拖了很久的样纸w</li>
<li>好吧，其实可以把分割线里面的东西打印下来当手册，每次部署的时候查一下。</li>
</ul>
<span id="more"></span>

<p>唔~很早就答应修修写一篇关于django部署的文档了，但是由于最近成都的天气实在是太热，完全处于挺尸状态什么也不想做，所以就耽误了下来（喂喂喂，段喵喵你确定不是因为沉迷于基三不能自拔嘛）。咳咳。。。</p>
<p>好了，不说废话了，还是直接说说正经的吧。</p>
<p>心急的人只看分割线内部的东东就足够了。不着急的请跳过分割线。</p>
<p>先明确一个概念，文章中所有说的django项目目录，指的是manage.py所在的目录。</p>
<p>文章里的项目名称指的是你在创建这个django app的时候起的名字。</p>
<p>在下面的例子中我都假装我创建了一个叫DEMO的项目，大家按需把DEMO换为自己的项目名称。</p>
<p>假装这个项目我是要部署在yumendy.com这个域名下面。</p>
<p>———-我是萌萌的分割线———-</p>
<p>这里的例子是以Ubuntu下部署为例的。假装你现在拿到的是一个全新的Ubuntu</p>
<ol>
<li>安装必须的软件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo apt-get install python-dev</span><br><span class="line"></span><br><span class="line">pip install django</span><br><span class="line">pip install pillow</span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改django配置</li>
</ol>
<p>修改settings.py文件。</p>
<p>加入如下四行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>).replace(<span class="string">&#x27;\\\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>).replace(<span class="string">&#x27;\\\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在生成环境下可以把settings.py里的DEBUG改为False，别忘了在ALLOWED_HOSTS里加一个’*’，即改为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>然后在项目目录里创建两个文件：</p>
<p><code>DEMO.conf</code></p>
<p>里面写如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   80;</span><br><span class="line">    </span><br><span class="line">    server_name www.yumendy.com yumendy.com;</span><br><span class="line">    access_log /var/log/nginx/yumendy.com.log ;</span><br><span class="line">    error_log /var/log/nginx/yumendy.com.log ;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">            uwsgi_pass 127.0.0.1:8800;</span><br><span class="line">            include uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~/static/ &#123;</span><br><span class="line">            root  /var/www/DEMO/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~/media/ &#123;</span><br><span class="line">            root  /var/www/DEMO/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个nginx的配置文件，解释一下上面的内容：</p>
<p>第2行的80是端口号，可以按需修改。</p>
<p>第4行的server_name后面写自己的域名，没有的话可以写localhost或者127.0.0.1</p>
<p>第5、6两行是日志路径可以自己修改。</p>
<p>第9行是与uwsgi通信的地址和端口，这里也可以使用socket文件进行通信，但是建议使用端口更容易配置一些。</p>
<p>第14行是将来需要存放静态文件文件夹的路径，我的静态文件的文件夹是放在项目目录下的，项目目录随后会放在/var/www/目录下所以我这么写了。</p>
<p>第19行同理，只不过是media文件的配置。</p>
<p>再创建一个文件：</p>
<p><code>DEMO.xml</code></p>
<p>里面是如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uwsgi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">socket</span>&gt;</span>127.0.0.1:8800<span class="tag">&lt;/<span class="name">socket</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chdir</span>&gt;</span>/var/www/DEMO<span class="tag">&lt;/<span class="name">chdir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>DEMO.wsgi:application<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">processes</span>&gt;</span>1<span class="tag">&lt;/<span class="name">processes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">daemonize</span>&gt;</span>/var/log/uwsgi.log<span class="tag">&lt;/<span class="name">daemonize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">uwsgi</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是一个uwsgi运行的配置文件，解释一下内容：</p>
<p>第2行是说uwsgi监听的端口，注意此处我写的是8800这个需要与之前的conf文件里的第9行保持统一，如果在一个server上部署多个django项目，请注意区别一下这个端口。</p>
<p>第3行是项目路径</p>
<p>第4行是wsgi应用入口，你只需要将前面的DEMO改为你的项目名称就好</p>
<p>第5行是uwsgi进程数，建议与逻辑处理器保持一致</p>
<p>第6行是日志路径可以自己配置</p>
<ol start="3">
<li>打包上传</li>
</ol>
<p>把项目上传到服务器上并且解压缩，我是丢到了/var/www/目录下</p>
<ol start="4">
<li>部署</li>
</ol>
<p>进入/etc/nginx/site-enable/目录下执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /var/www/DEMO/DEMO.conf</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>

<p>进入/var/www/DEMO/目录，执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python manage.py collectstatic</span><br><span class="line">sudo uwsgi -x DEMO.xml</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>加入开机自启</li>
</ol>
<p>修改/etc/rc.local文件，在exit 0这一行之上加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo uwsgi -x /var/www/DEMO.xml</span><br></pre></td></tr></table></figure>

<p>完</p>
<p>———-我是萌萌的分割线———-</p>
<p>嘿~其实说不着急的人看这里就是想简单解释一下分割线里面的东西是什么，以及我们为什么要这么做。</p>
<p>一般情况下，一个客户端发起一个http的requset请求到服务端返回一个response就是一个完整的流程。</p>
<p>因为服务端的各种语言、各种框架种类繁多，所以我们必须有一个标准来使一些工作变得可以复用。</p>
<p>在这里我们使用nginx作为http server，它主要有两个作用，第一个是作为反向代理，可以将来自不同域名的请求委托给不同的后台服务来处理，这样就可以在一个server上部署多个项目了，语言不同也完全没有关系。第二个重要的工作就是管理静态文件。可能有些童鞋会问了，为什么要用nginx来管理静态文件的请求呢，交给Python不是一样可以吗？这个问题其实很容易回答，大家不要忘记效率问题，django处理静态文件的方法非常简单粗暴，用open命令打开文件，然后读取，再封装成request返回。对于大量细小的文件访问操作，效率可想而知，所以交给nginx是一个不错的选择，现代的浏览器都是可以同时发起多个请求的，在多进程的处理上，nginx也优于直接使用django。</p>
<p>接下来想简单介绍一下uWSGI，uWSGI是一个web服务器软件，它实现了两种协议，一种是uwsgi还有一种是WSGI，这里的WSGI是Python web服务网关接口。是一种协议，简而言之是一种约定，所有的框架只要按这个协议实现自己的WSGI接口的web应用，就可以很方便的和支持这个协议的web server对接了。在这里我们选择的正是uwsgi这个web server。知道了这一点的话。其实大家学会了django的部署也就会了其他python web应用的部署。</p>
<p>那么现在整个流程就比较清楚了，客户端发起一个请求，被nginx接收，如果请求是静态文件（其实就是判断访问的url是不是static或者media）则直接由nginx返回静态文件，如果不是静态文件，则委托给uwsgi来处理，uwsgi根据配置文件来调用相对应的WSGI接口的web应用。取回响应内容再交还给nginx返回用户。</p>
<p>这个流程有什么好处呢？</p>
<p>其实主要是Nginx比起直接使用uwsgi来，作为一个专业的http server其安全性更好，而且在进程分配和维持用户连接上有更多的优势。</p>
<p>那么看完了这些可以直接上去看分割线里面的东西了。一下子会变得好理解很多呢w</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
        <tag>运维</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>朋友圈里的九图脚本</title>
    <url>/2016/10/cl0rhzoxj003772q1gi4n8s0p/</url>
    <content><![CDATA[<p>特此来拯救挣扎在9图里的孩子们</p>
<p>明明只有一张图，但是凑不够九张就是好蛋疼，那么这个项目你值得拥有。</p>
<span id="more"></span>

<img src="/2016/10/cl0rhzoxj003772q1gi4n8s0p/1.png" class="">

<p>其实这个项目有点小水。</p>
<p>其实就是对PIL最简单的应用，主要涉及到切图和算坐标，其实没有什么技术含量，封装成了一个类，可以供其他程序方便的调用。</p>
<p>如果不懒的话可以写一个界面，但是我比较懒，甚至懒得作为一个功能加到这个博客里。23333不过如果有人愿意的话可以拿去用。</p>
<p>项目开源在GITHUB上，项目地址：<a href="">https://github.com/yumendy/nine_picture</a></p>
<p>如果你喜欢这个项目，而且觉得对你有帮助的话，不妨投喂我一下，如果有人投喂的话，我承诺会将这个功能作为一个小小的模块插在这个部落格里，也就是可以实现你上传一张图片，直接得到9张切好的图片。完全在页面上操作。方便爪机用户。：</p>
<p>投喂宝账户（云养喵系列。。养段喵）：<a href="mailto:&#x79;&#x75;&#109;&#101;&#110;&#100;&#121;&#x40;&#49;&#x36;&#51;&#46;&#99;&#x6f;&#x6d;">&#x79;&#x75;&#109;&#101;&#110;&#100;&#121;&#x40;&#49;&#x36;&#51;&#46;&#99;&#x6f;&#x6d;</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>部落格记</title>
    <url>/2016/08/cl0rhzoxm003c72q19q5r5918/</url>
    <content><![CDATA[<p><em>其实就是写写有关这个站点的一些事情</em></p>
<p><del>好吧。。倒不如说是段喵懒癌康复记</del></p>
<p>就是一些建站过程中的心得和吐槽w</p>
<span id="more"></span>

<p>唔～我得理理思路，该从什么说起呢。</p>
<p>其实一直以来都想做一个属于自己的博客了。可能有人会说，段喵你不是在大一的时候就用WordPress搭了自己的博客嘛，难道那个博客不属于自己吗？</p>
<p>说起来的确是这样的，最初是在新浪云上，后来又跟着飞神换到了香港的一家PHP空间上，虽然一直用着也不差，但是总是觉得还是应该自己动手去做一个博客，这样至少可以随心所欲的加一些自己喜欢的功能了。这个想法萦绕在我的脑海里已经有一年多了。一个叫Blog的项目也是删了建，建了删，迟迟写不出一个满意的版本。也是有点心酸。</p>
<p>这次因为一些意外。使得自己那个年久失修的博客彻底挂了。虽然说已经很久很久没有打理它了，但是说起来多少还是感觉心里有些空落落的。</p>
<p>于是自己做一个博客的心愿又被自己重拾了起来。于是乎一天半的时间，这个小站就做好了。基于Django和Bootstrap。当然前端的设计是参考了其他同学的博客，感觉自己真的不是一块做设计的料。现在博客的基本功能都已经差不多了。简单的说有了动态的导航栏，富文本的博文系统，分类管理和碎碎念功能。也有一个完整的发布后台。静态文件全部托管在七牛上。而富文本编辑器使用的是Django-ueditor。这个开源项目真的做的非常不错，但是可惜的是开发者已经不再维护了。随着django的更新，这个插件已经不是很好用了。它没有调用Django的Storage系统接口而使用的是直接对磁盘的文件读写功能，造成的直接影响就是和七牛的水土不服。</p>
<p>两个选择就摆在了我的面前，第一个就是把media文件换给DO服务器，但是想想旧金山服务器的速度实在是不能忍，第二个就是改。纠结再三还是选择了后者。读了读代码发现逻辑还算是清晰。于是偷懒就直接把磁盘写入改为了七牛的存储接口调用。好吧。我承认我也是够懒的，因为我在考虑，如果近期有时间的话。是不是要自己试着移植一下百度的这个神富文本编辑器。</p>
<p>好吧。突然想吐槽一句。为了这个博客我已经好几天没有上基三了QAQ</p>
<img src="/2016/08/cl0rhzoxm003c72q19q5r5918/20160818224208667.jpg" class="">

<p>写在最后，希望自己可以把写博客的习惯坚持下去，也欢迎大家有时间多来看看。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>逃课日记</title>
    <url>/2017/01/cl0rhzoxn003f72q13ub8dmlq/</url>
    <content><![CDATA[<p><em>读万卷书，行万里路。让自己一点点的成长起来。平心静气，让自己过得精致温暖……</em></p>
<span id="more"></span>

<p>金城雨落，小店里依旧是熟悉的气息。光阴荏苒，岁月的痕迹是满墙的斑驳。</p>
<p>手中的饮料还是过去熟悉的味道，但似乎现在已经有点不太习惯那种甜腻的感觉了。窗外雨中步履匆匆的学生中，似乎显得我的悠闲有些太格格不入。</p>
<p>又到了这座熟悉而又陌生的城市，有太多说不出的感慨。131路公共汽车依旧颠簸，车站兜售煎饼果子的回民大叔笑容还是那么的灿烂。金城小雨。</p>
<p>大学期间一直都没有回母校看看，一直觉得，相比较其他人丰富的大学生活来，自己的真的是惨不忍睹，过得可以说一点都不好，感觉就是高三另一种形式的延续。混的一点都不好，但是如今也想得通了。很多事情不是自己可以轻易改变的，该回来的时候还是得回来看看。</p>
<p>校门口的饮料站依旧是过去的样子。菜单上已经没有了昔日爱喝的饮料，直接问店员是否还能做“柠檬水晶红茶”，却看到了她一脸的茫然。一旁的店长继续低着头忙着自己手里的事情，轻声说了句：“我来做。”抬起头看看我，我看看她，依稀还记得三年前那个刚进店笨手笨脚比我们大不了几岁的姑娘，现在已然成了这里的店长。</p>
<p>在靠窗的小桌前，看着窗外来去匆匆的人群，想到了自己的三年，匆匆中早已忘记了什么才是生活。昔日也曾怀揣着美好的期望奔向一个自己也不知道该是怎么样的一个明天，一个怎么样的大学。似乎现在是明白了，但似乎明白的也太晚了些。</p>
<p>不管怎么说，没有了生活，就没有了为来。</p>
<p>晚上见到了高中时期的老师。记忆最深刻的还是朱姐说过的一段话。朱姐说一个人对自己要求高了的同时，其实在骨子里对别人的要求也是很高的。对于这一点，从某种角度讲我真的是无可辩驳。想了很久，对自己严苛的同时的确难免对身边的人有同样高的要求，之所以之前一直觉得对别人没有那么高要求，也许真的只是因为关系没有那么密切吧，或者换句话说并没有真正和自己有关，但终有一天，自己会有自己的家庭，会有自己的孩子，到了那个时候又该如何去面对他们呢？严于律己，宽以待人，说起来容易，但做好却真真切切不容易。</p>
<p>回家后认真思考了一下该怎么去度过这一段不算长的假期。似乎被郑老师说准了。我根本不是一个能闲得下来的人。休息了不到一个月，就闲不住了。</p>
<p>七月份来到了朝思暮想的成都。在杨哥的公司里实习了两个月，其实从我内心讲，这两个月是我过得最开心的两个月了。</p>
<img src="/2017/01/cl0rhzoxn003f72q13ub8dmlq/1.jpg" class="">

<img src="/2017/01/cl0rhzoxn003f72q13ub8dmlq/0.jpg" class="">

<p>初到成都，在杨哥和亮姐帮助下在天鹅湖花园租好了房子。开始了一段属于自己一个人的生活。一个新的环境。</p>
<img src="/2017/01/cl0rhzoxn003f72q13ub8dmlq/2.jpg" class="">

<img src="/2017/01/cl0rhzoxn003f72q13ub8dmlq/4.jpg" class="">

<p>其实对于新的环境一开始也是有些不适应的，但是很快就喜欢上了这种高效的生活方式，白天去写代码，晚上可以做些自己喜欢的事情。可以说每天都在做着自己喜欢的事情。说起来生活很简单。虽然只有短短两个月时间，和杨哥接触的多。对生活这件事有了一些新的理解，慢慢理解了生活品质对一个人一辈子的重要性。</p>
<p>一生说长不长说短不短，有些错过的东西可能就再也不会回来了。有些属于一个时期才会有的感觉，过去了就再也找不回来了。想想小时候最希望的事情是有一台属于自己的电脑，那时候甚至还给自己盘算好了，如果我有一台属于自己的电脑，我要如何分区，我要装多少自己喜欢的游戏，甚至连用什么桌面都已经盘算好了。但是到了如今，真正拿到自己的电脑的时候，昔日的种种幻想什么的早已经不复存在。完全就是简约化的风格，找不回原来的那种快乐了。</p>
<p>杨哥说过一句话我非常的赞同，杨哥告诉我只有花出去的钱才是属于自己的。想想曾经的自己就是那种，对别人很大方，但是总是在克扣自己，能凑合就凑合一下的样子过着自己的生活。其实有时候想想也是有趣，有些很小的花销却可以提升自己的生活品质，何乐而不为。如果自己都不能对自己好，那么谁有能对自己好呢。</p>
<p>好景不长，相聚总是匆匆，因为实验室项目的原因，需要去北京一段时间。对于北京的生活，准确的说是在北京的这段生存。也许是因为有了太大的落差。可以说真的过的一点都不开心。每天都是满满的负能量。每天睁开眼都不得不直面阴霾笼罩下的这座城市。不知道为什么就是对这座城市一点好感都没有。人情淡漠，快节奏的生活让人有些无所适从。日常的工作却和这个城市的背景有点格格不入。体制内臃肿的制度和规范，面对很多事情都有一种心有余而力不足的感觉。有一种无力感大约就是自己想去做好一件事情，但是由于种种外界原因你却使不上劲的那种理想和现实之间的落差感。即使如此，也不得不承认的是对于我来说，参与这样一个国家项目，对自己的收获也是无数的，参与维护一项运行近10年的项目，可以看到每一个前辈在其中的付出和努力，其实一开始也质疑过自己所做事情的意义，但是随着深入渐渐的不再怀疑。努力做好自己的工作。</p>
<p>毫不夸张的说就是每天都不开心。最大的收获也许就是每天做一顿中午饭，让自己的厨艺有了不小的进步吧。对于项目相关的事情只能说有苦有乐吧。不便多说。但是单从生活角度讲，最难的日子也算是熬过来了。如果说昔日还在纠结要不要考研，要不要继续念书，其实现在已经基本不再像从前那么纠结了。人一辈子不长不短，还是多用点时间去做些自己喜欢的事情吧。别太委屈自己。</p>
<p>在北京的日子，有不少挚友寄来的零食和礼物，但是最让我感慨的还是失联送我的一本《一人食》。一人食，一个人也要好好吃饭，一个人，也要过得精致温暖。还是那句话，要好好的生活，不管自己是在什么样的环境下，都要过好自己的日子。虽然很多时候是夹缝中求生存，但是从另一个角度说，即使是这样，也要好好吃饭，也要过得温暖。</p>
<p>于是乎从一盘麻婆豆腐开始，让自己好好生活。一人食，一个人也要好好吃饭，一个人，也要过得精致温暖。</p>
<img src="/2017/01/cl0rhzoxn003f72q13ub8dmlq/5.jpg" class="">

<p>在北京的日子，在周末有时间的时候偶尔会和已经毕业的王彤师兄聊聊天小聚一下。作为一个工大毕业的老北漂，跟师兄聊天可以说真的学到了很多不一样的东西。也有很多观念上的改变吧。关于未来，关于择业，关于恋爱，关于生活。有些我曾坚守自认为成熟的东西，从另外的角度看来其实有时候也十分幼稚。也许这就是一个成长的过程。</p>
<p>坚守自己的原则，读万卷书，行万里路。让自己一点点的成长起来。一路走来，磨砺无数，时光慢慢把年轻的棱角都打磨平了。生活的节奏都在自己手里。平心静气，让自己过得精致温暖。</p>
<p>回首这一年的日子，想想也是喜忧参半，不过那些不快的事情，就让它随时光远去吧，留那些美好在心里。逃课日记，其实满打满算十个月的时光，不仅仅是远离了那些繁重不堪的工作，更重要的是明白了要好好生活，好好的照顾自己。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>又一个博客</title>
    <url>/2019/06/cl0rhzoxp003k72q15dwr458c/</url>
    <content><![CDATA[<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>距离上一次写博客又过去很久很久了。</p>
<p>不得不承认打理博客永远是一个非常烦人的事情，之前在DO上自己做的Django版本的博客，也因为DO的主机被回收而一起丢失了。些许遗憾，但这也是成长必经的一部分。</p>
<p>总会用一些文字去记录生活，脱离开QQ空间、朋友圈之类的熟人社交，或许会更自在一些。</p>
<p>想想从最早的WP的博客，到DIY的Django博客，再到现在用起了Hexo，甚至连主题都只用默认的了。不是越来越懒，而是似乎心里越来越老了，对个性化的追求好像越来越少了，开始回归事物本质。想想也说不定下一个博客就是在csdn上的一个博客而不再自己瞎搞了。</p>
<p>如果说学生时代弄一个博客记录各种技术成长还是为了去混一个好的offer，现在似乎没有这样的必要了。可以更纯粹的写自己想写的东西了。</p>
<p>估计这个博客未来更多的会是一些与生活相关的东西，而不再是各种技术文章。</p>
<p>无需关注，若是见到，便是缘分。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>好好生活</title>
    <url>/2020/10/cl0rhzoxq003n72q19j9d0p9d/</url>
    <content><![CDATA[<p><em>当“曾经”不总挂在我们嘴边时，生活就开始了。 ——题记</em></p>
<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>其实在两个月之前，就有考虑过要写这样一篇文章，但一直苦苦纠结于到底要用一个什么样的标题，却无论如何都没有想到，在两个月之后的今天，最终还是回归到了这样一个俗套的名字上。</p>
<p>又不是要卖文为生，仅仅就是写给自己的一些文字而已，何必久久纠结于一个标题，又不指望靠着一个标题吸粉。</p>
<span id="more"></span>

<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>若不是西西弗书店橱窗里的单向历的封面从2020悄悄变到了2021，我都不敢相信这一年真的马上就要结束了。整个世界都被疫情禁锢的一年，仔细想来，这一年也是过得有些浑浑噩噩，但的确又完成了很多曾经看似不可能完成的事情。</p>
<p>每天都在都似乎在盼望和期待着什么，但似乎一切的期望都被掩盖在久久不能摘下的口罩里了。</p>
<p>几经摇摆中间，时间就这么悄悄溜走了。如果一定要给这些时间加上一个描述的话，“焦虑”自然是最合适不过的一个形容词了。</p>
<p>似乎每个人都在焦虑。都在为一些很难去改变或者改变不了的事情而焦虑。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>可是不得不承认的是，从去年年末开始，很长一段时间，我都把生活过得一团糟。撇开工作不谈，很长一段时间我都很害怕微信的提示音和手机的震动。但是又不得不去处理这些消息。在工作压力不小的情况下，还要独自去处理装修的事情。明明感觉到的是非常的力不从心，但是却又没有任何的办法。</p>
<p>一旦心情变了，很多事情也都跟着发生了变化，就连每天给大橘添饭，给二猫梳毛，也突然变成了一种无形的压力。尤其当回到出租屋已经晚上快12点的时候，真的有太多的无奈。</p>
<p>身边不断有人离开，有的是因为工作不顺心，有的是因为在深圳看不到未来，每一个相熟的人的离开，都会在我的心里泛起一丝不小的涟漪。</p>
<p>而我到底在焦虑什么呢？</p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>5月，应时任哈工大微软俱乐部主席的琳爷之邀，以老学长的身份去跟俱乐部的同学们聊聊天，分享一些大学学习和生活相关的内容。在上了麦的一瞬间，恍如隔世，突然想到，在7年前，自己坐在二区主楼的教室里听着学长们分享的场景，整整七年过去了。想想曾经的每一天都盼着自己可以早一点走出校园，现如今，却无论如何不可能再回去了。</p>
<p>提前收集到的QA单上，绝大多数问题都非常好回答。唯独面对“程序员的职业生涯是不是只能到35周岁”这个问题时，我有些许踌躇。</p>
<p>其实这个问题我思考了非常多天。</p>
<p>作为一个初入职场的菜鸟，我是没有办法回答这个问题的，虽然身边有很多非常优秀的35+的同事，但是这并不能代表整个行业的现状。经过了两天的思考，我只能给出一个看似万金油的回复：</p>
<p>“当我们想知道未来会是什么样的时候，我们就朝前看。今年的我，25岁，等我35岁的时候，是10年后。我很难预期我十年后会是什么样的，但是我还记得10年前的我是什么样的，我在想着什么以及我在做着什么……”</p>
<p>2010年，对我来说其实也是一个非常不一样的年份，那时初三，在五月份参加了西北师大附中的招生考试，成功拿到了录取资格。然后是参加中考。紧接着在所有人都快快乐乐玩耍的初三毕业假期中，刷着问物理老师借来的两本物理竞赛教程并跟着视频课提前学着老人教版高一的内容。</p>
<p>那时的我，最担心的是会不会在这样一个全部都是全省最优秀的人聚集的地方而掉队。</p>
<p>10年前的我，那时候对未来的预期又是怎么样的呢？10年前根本没有想过10年后的事情，那时候也许唯一能想想的就是再熬三年，高中毕业后就可以有属于自己的笔记本电脑了。甚至有想过，要在电脑上把每个版本的仙剑都装一遍。</p>
<p>如果一定要说长远一点的幻想，那时候也不是没有的，那时候有想过，一定要考到北京去，原因可能和很多很多当时的小朋友一样，仅仅是一个小时候梦想的执念，而对那个莫名其妙的城市，也许根本不会有任何的感情（关于这一点，在后来的十年中得到了充分的证实，从高一寒假的竞赛培训，到大学毕业前夕一年多的驻扎，对那个城市真的是没有一点点多的感情）。至于其他的，想想至多就是想过要上计算机专业，但是那时候其实并不知道计算机专业到底是要做些什么，看了很久的VB，却不知道能用来做什么，就轻易的下了结论，自己并不喜欢编程，甚至以为就是去给别人装装系统，修修打印机什么的。</p>
<p>可是，时间一转就到了10年后，我也从来没有想到，居然10年后的自己，会坐在腾讯的办公楼里，也想不到，自己现在会那么热爱写代码。更想不到的是，自己在大学时候自己写的代码就能成为“有用”的代码。</p>
<p>所以，我到底在焦虑什么呢，10年后的事情谁又能知道呢。这些文字我会保存在GitHub上，10年后再来看，也许那时候就会有一个比较清楚的解答了。</p>
<p>有时候会和身边同期入职的小伙伴们聊起这个问题，关于职业生涯。其实在这件事情上，如果能保持积极和持续学习的话，我自己还是持乐观态度的。工作两年，到底是什么样的一个概念呢？放在员工平均司龄不会超过2年的互联网公司，意味着已经超过平均线了。但是其实如果映射到传统行业来看，2年，也许职业生涯连刚刚起步都算不上。就用教育行业来说，我还依稀记得从前父亲有跟我讲过，他们那时候毕业进学校教学生，第一二年是教初一初二，但是第三年的时候不能跟着学生一起上初三，因为是新人，学校会在初二多压一年，才能让年轻老师去带毕业班，换句话说，需要整整4年时间，才算是把整个初中学段的教材摸了一遍。如果真正要成为骨干，可能还需要更多的时间去历练，或者说还需要多带几轮。</p>
<p>可是在快节奏的互联网公司里，很多时候会让人有了一种错觉，以为很多毕业10年左右可能就已经到了职业的天花板，晋升空间受限，职业生涯也就差不多要结束了。</p>
<p>为什么我会用错觉这个词呢，其实我有问过自己，职级到头是否就是职业生涯到头了呢？职级这东西从某种程度讲，其实就是一个公司的人力资源管理的一种指标，可是它并不是我们作为一个个体职业生涯的度量衡，我们是否要摄入新的知识，是否坚持输出，这些都只与我们“个人”有关，与某一个群体赋予我们的一个标签并无关联。所以，我们为什么要为这个而纠结呢？只要坚持跟上这个高速发展的技术潮流，不要掉队，就总会有标签贴在我们身上的。</p>
<h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>水电安装的最后一天，在楼下的“大鼓牛杂”请装修公司的何工吃牛杂煲。就这热乎乎的牛杂汤闲聊，我对何工说，“从某种角度讲，我们的职业类似，你是水电工程师，而我是软件工程师，虽然工作的对象和方式不一样，但是本质差不多。”</p>
<p>虽然在和别人嬉笑怒骂的时候，我会以码农自诩，嘲笑自己是信息时代的搬砖工，和早几年电子厂车间里拧螺丝的工人没有本质不同。但是，其实我有认真思考过这个问题，关于职业认同。</p>
<p>发自灵魂的拷问，如果可以做到10分好，我到底愿意做到几分？其实这个问题我问过自己无数次。每次的回答都是一样的，“竭尽所能”。</p>
<p>还是要从这次装修说起，因为工作繁忙，很少在施工时间来工地看情况，大都是晚上自己打着小手电来看。家里水电安装那天是我为数不多全天在家的一次。我记得非常清楚那天安装时，何工一丝一点的调整着家里的每一个插座和开关面板，每一组都丝毫不差的整齐。看他一会远观一会近调。</p>
<p>在当时的那一刻，我心里有那么一丝丝的悸动，这才是工作该有的态度啊。其实想想这样的场景在我盯着装修的这漫长的半年时间里时有发生。从总负责的谢工到工程队的每一个师傅再到各个家具家电供应商的安装工，我看到了太多类似的场景，大家把自己的工作当做完成一件艺术品一样，精益求精，毫厘间精雕细琢。最后不忘拍照记录。有时候称赞起一些师傅手艺不错时，他们会拿出手机相册里的各种作品如数家珍娓娓道来，这个是在某某某个工地做的，当时怎么怎么样，那个是在某某某个工地做的，当时怎么怎么样。</p>
<p>那种源于内心的职业尊严和职业态度，令人肃然起敬。反观我们自己，有时候我在想，是不是在这种焦虑和浮躁的环境下，我们早就把匠心丢之无影了。如果自己都不能去认可自己的工作的话，又怎么可能指望别人去认可呢，即使别人认可了，自己是否真的能心安理得的接受这份认可呢？事不在大小，只为做到最好。正如小野二郎所说：</p>
<blockquote>
<p>重复一件事情，使之更加精益求精，但永无止境。<strong>没有人知道真正的巅峰是在哪里</strong></p>
</blockquote>
<p>依旧是那句话，如果我们连自己都不能认可自己，又怎么指望别人能认可呢？与其去无意义的争执，不如回过头认真雕琢一下手中的工作。所以我到底在焦虑什么呢？</p>
<h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>两年前在班车上读完了梁实秋的《心守一事去生活》，朴实无华的文字中，却处处流露着生活的气息，无数次向往着那种平和精致的生活。有时候刷着朋友圈，看到朋友们晒出来的各种照片，也会羡慕别人生活的精致，慨叹自己生活不如愿。忙可能是真的，不开心也可能是真的，但是没有能力好好生活，却有时候也有些说不过去。</p>
<p>到底是用别人的错误惩罚自己，还是在给自己画地为牢，又有谁能完全说得清？</p>
<p>好好生活，简简单单四个字，但真正要去付出实践却需要付出无数的勇气，毕竟对于某种我们已经习惯了的生活而言，想要“好好生活”，就必须要走出“舒适圈”。而这对大多数人来说，都是一件极其困难的事情。毕竟，你看到别人的“好好生活”中精致的结果背后，可能有很多意想不到的艰辛。</p>
<h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>稍作踌躇，一年时间又这么过来了，告诉自己要好好生活，那么就一定要努力坚持下来。一个难以量化的目标往往都会不了了之。倒不如为自己定一些小小的目标，争取完成，如若完成的好，去犒赏一下自己倒也未尝不可。</p>
<p>当前十月伊始，到今年年底还有整整三个月时间。那么就为这三个月列出一些小目标吧：</p>
<ul>
<li>从下周开始（2020-10-12）每周至少运动2次（还有总共12周）。</li>
<li>每个月读一本人文社科或者文学类的书籍（kindle阅读完成数+3，这样今年就完成12本的阅读量了，可以值回买KU的钱了）。</li>
<li>每一个半月写一篇和技术/工作相关的博客（完成2篇，不在于篇幅长短，一定要有干货）</li>
<li>每个月写一篇生活类的博客（读书笔记、菜谱也行）</li>
<li>每周至少好好做一顿饭。</li>
</ul>
<p>既然有了目标，那也要想一下怎么去犒赏自己，如果到了年底完成了这些小目标，就去买一本<strong>midori的五年人生日记</strong>，去好好记录一下未来五年的人生。</p>
<p>可以看得出这些目标似乎都很容易完成，为什么不把目标定高一点呢？</p>
<p>显而易见，我是希望通过这些让自己好好生活，而不是给自己的生活徒增压力:)</p>
<h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><p>感谢你看到了这里，<strong>好好生活</strong>。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>湘江边的随感</title>
    <url>/2020/11/cl0rhzoxr003s72q18b8zfs9t/</url>
    <content><![CDATA[<p>十一月的江风拂过那一刻，似乎些许凉意。</p>
<span id="more"></span>

<img src="/2020/11/cl0rhzoxr003s72q18b8zfs9t/1.jpg" class="">

<p>倚栏远眺，波光映衬着彼岸的万家灯火。街头歌手在以自己独特的音色演绎着张震岳的那一曲《再见》。</p>
<p>恍惚间，此情此景，似曾相识。有那么一瞬间，世界安静了。</p>
<p>有多久不曾想起那些日子了。松花江畔，望着夕阳一点点落下，喧闹人群伴着远处歌手的吉他声。</p>
<p>什么也不做，就是静静的看着。</p>
<img src="/2020/11/cl0rhzoxr003s72q18b8zfs9t/2.jpg" class="">

<p>“不可能每一分钟都用的那么有意义，有时候一些时间也是可以用来浪费的。亦或者说，其实这些随心所欲可以挥霍过去，用来取悦自己的时间，才是人生忙忙碌碌过程中最宝贵的东西。”</p>
<p>人生本来就是没有意义的，我们强行赋予了自己各种“使命”，责任心和各种欲望驱使下不断一遍又一遍催眠自己，告诉自己所做的一切都是值得的。</p>
<p>可是纵观上下五千年，名留青史不过寥寥数人。更多人就如沧海一粟，短暂一生转瞬而过 在历史长河中也不会有任何涟漪。</p>
<p>过了就过了。</p>
<p>我们都在追求一个结果，但是走到最后蓦然回首才发现。一路奔波而来踩下的一串深深浅浅的足印，便是那所谓的结果。</p>
<p>可曾想过，那一路错过的风景，就再也回不来了。</p>
<p>多久不曾停下脚步看看夕阳了呀，你听，是浪花的声音呢。</p>
<p>(晚安，愿一夜无梦。)</p>
<p>雨翌</p>
<p>2020年11月14日 2:17 于长沙</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>聊一聊信息流和读书</title>
    <url>/2020/11/cl0rhzoxt003v72q1da3r0oss/</url>
    <content><![CDATA[<p>偶然在电梯里看到一个四五岁的小朋友在哭着闹着向家长要看抖音的时候，心生感慨，想聊一聊关于以短视频为代表的信息流产品和读书的话题。</p>
<span id="more"></span>

<p>生活在21世纪的我们，科技的发展使得我们对信息的触达更佳容易，获取到的信息更加的多元化。在短短的几年时间里，我们从信息匮乏的状态一步踏向了严重的信息过载。每天有太多信息不断充斥着我们的生活，而在如此众多的信息中，我们已经很难快速有效的甄选出我们所需要的信息。各类推荐引擎和信息流产品也应声而出。</p>
<p>技术本身是中性的，而最终它导向的结果，还要看使用技术的人。一旦涉及到人的问题，就绕不开人性。不论是信息流产品的设计者还是信息流产品的使用者，都对这种能够快速满足人对新鲜感获取需求的产品报以极大的热忱。从使用者角度讲，可以根据自己的“兴趣”，快速被推荐到自己喜欢的内容，在一刷中，充斥在自己小小手机屏幕上的各个标题都是想点进去的。于是乎在一次次的点击、查阅和停留的过程中。基于机器学习的推荐算法又在飞快的了解着我们，将更多信息远远不断的推送到我们眼前。在我们消耗时间的同时，一次次随着内容曝光的广告，也使得信息流的开发者赚的盆满钵满。</p>
<p>而与此同时，原本看似一件双赢的事情，慢慢变了味道。面对各类的信息流产品，究竟是我们选择了信息，还是被选择了信息。信息流产品的运营者慢慢不满足于用户一天利用“碎片化”的时间来获取信息，转而是想把大家的时间变得“碎片化”，一个简单的逻辑，只要刷的时间足够多，曝光的广告也就足够多。因此，信息流产品的目的从提高获取信息效率转而成了如何更多的消耗大众的时间。</p>
<p>不得不说，其实互联网产品的设计一切都非常的符合“逻辑”，只要反向推理，总能找到无数的解决办法。曝光更多的广告这件事可能很难，但是一旦转变为让大家对着这一块小小的玻璃屏幕消耗更多的时间，似乎事情就变得相对容易了那么一点点。毕竟对于信息流产品的运营者还有两大工具可以用，一个是数据，一个是人性。</p>
<p>首先说说数据，从内容角度，基于已有的各类用户数据，运营者可以轻松的知道大众“喜闻乐见”的内容是什么，没错，就是你想的那样。然后基于这些已有的先验经验，为“冷启动”的新用户准备更多此类内容，使得很多人大概率第一次刷，就找到自己能点进去的内容（基于人性，你懂的，但不能细说）。从用户的行为数据角度，运营者可以清楚的知道，用户因为什么而停止了继续刷信息流。为了照顾好用户的情绪，为了用户“体验”，某个已经成为短视频代名词的产品，为了让用户感知不到播放器加载视频的那不到0.5秒的时间，甚至在实现的时候做了两个播放器对象，提前加载数据，在你下滑的时候，展示另一个已经加载好视频的播放器，而不是在原来的播放器控件上重新加载新的视频。基于这种流畅的体验，想要停下来对于很多人还是一个不小的挑战。</p>
<p>关于人性，这种在非常短时间内可以快速满足新鲜感和好奇心的信息获取方式，我们很难走出舒适圈，相比较做其他的事情，这种划几下手指就能促使我们分泌大量多巴胺的事情自然而然成为了大多数人的首选。</p>
<p>“快感”的反馈来得太快，有时候不见得是一件好事，看似好像可以让我们用最短的时间在百忙中“放松”一下或者说得更直白一点是“爽”一下，但是又有多少人能真正做到节制呢。周而复始，终究有一天你会发现，你的人生变得“无聊”了起来。</p>
<p>是的，“无聊”了起来，做什么好像都没有意思，或者说不感兴趣了。这一点似乎并不意外，当我们沉迷在各种以短视频应用为代表的奶头乐产品刺激我们分泌的多巴胺中时，我们的身体对于“快乐”的阈值也提升了。那些曾经需要付出很多努力才能得到一点点正反馈的“苦差”，自然对我们也就失去了吸引力。我们的生活也就变得“无聊”了起来。</p>
<p>如果说，这些过于理论和专业的术语让人看起来让人头晕，那么我们可以简单的去思考一个问题，“在一条短视频播放的15秒时间里，我思考了什么？”</p>
<p>一条一条飞速而过的短视频，时间飞快的流逝，但是我们的思维也跟着停滞了下来。</p>
<p>空虚和疲惫，是无法避免的后遗症，来源于多巴胺受体阈值的提升和信息过载的压力。如果说奶头乐让我们变得难以快乐，那么过多的关注圈以外的信息让我们变得不会再快乐。坦言讲，不管是欧洲一些城市的暴乱，还是美国大选是不是拜登可以上台，都不是我们可以左右的，属于我们关注圈外的事项，也同样对我们个体的影响都是微乎其微，倒不如关注一下身边，我们能不能顺手清理一下书桌让我们办公的环境更为干净整齐。</p>
<p>最后想借一点点篇幅聊聊读书的问题。</p>
<p>我为什么喜欢读书，其实有很多时候，我觉得对于我来说，读书，不仅仅是一个爱好，更是一种从小到大养成的习惯。</p>
<p>一杯清茶，一本书，就是一个下午的时光。这是我在15岁以前最享受的事情，小时候虽然家里有电脑，受限于父母的管控，只能适度娱乐。对于小时候剩余的大把时间，就只有用来看书了。</p>
<p>从某种角度讲，我是非常幸运的，出生在书香门第，对于读书和买书的事情，家里从来不加以限制，与此相反给予了最大的鼓励，在买书的方面，父母向来不会犹豫，所以小时候手里最多的卡片就是小城里各个书店的会员卡。从小学起，父母就会每月购买《儿童文学》，《少年文艺》之类的杂志回来供我们阅读。到了周末，没有什么其他的娱乐，我就会去书店转转，有时遇到喜欢的书，也会在书店一待一下午。这种习惯即使是到了现在也依然保留着，缝到周末，如果没有事在商场吃完饭也会去西西弗或者覔书店随便看看。有时候看到在书店里读书的学生，多少还是有些羡慕，如今的条件比起早些年真的是好太多，至少在书店有大量的公共阅读区，可以供大家坐着读书，想想十多年前，更多的还是席地而坐，不时地还会被书店的工作人员赶来赶去。</p>
<p>似乎有点偏题，还是言归正传，为什么现如今有这么多的信息获取渠道，而我依旧推荐读书呢？</p>
<p>因为读书总是和思考相伴的，虽然图像和影音可以带给我们更多的信息量，但是同样也限制了我们思考空间和想象力。举个例子来说，当看到三少书里描写的“九青神龙冰云隐”时，脑海中浮现出来的景象，和在阅读过程中，随着他的描写一点点在脑海中构建出来那种精妙绝伦的刀法和食材搭配，这种体验需要不时反复斟酌与研读其中的遣词造句，渐渐的产生的代入感和在你面前展示一张蓑衣黄瓜的照片相比，后者自是少了很多趣味。</p>
<p>当然不止于此，更多的是对于我们人生经历的迁移和体验。例如在读《禅与摩托车维修艺术》时，当看到“因为一个实验并不会因为没有达到预期的结果就被称为失败了，只有它的结果无法检验假设的真假时才会被称为失败了。”这一句时，心中不由会感到宽慰很多。在我们的生活和工作中，谁都免不了要去试错，但是对于试错这件事情，很多人都会选择非常消极的态度避之不及。但是如果我们细细品读这句话，即使是一次不合预期的尝试，也至少让我们明白了某条路径是行不通的。这也是一种成功，如果这样思考的话，似乎我们就更容易去接受工作中一些“失败”的尝试了。</p>
<p>正如罗翔老师为我们总结的，非功利的读书，才能让我们接受自己的失败，为我们提供一种真正的人生勇气，让我们真正意识到我们的渺小，培育我们的谦卑，世界不缺聪明人，缺有只会的人。非功利的读书，让我们不断丰富内心，抵制外界的浮华与虚荣。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年终随感</title>
    <url>/2021/01/cl0rhzoxu004072q18ws98pjk/</url>
    <content><![CDATA[<p>“宁静致远” ——题记</p>
<p>如果说一定要给过去的一年贴上一个标签的话，我会选择“兵荒马乱”。</p>
<p>一场突如其来的疫情，让生活偏离了“正常”的轨迹。出于本能中对于不确定性的不安，惶恐、不安、焦虑，却又怀着一丝侥幸。期待着疫情过去，却无法让时间停滞。</p>
<p>无关乎悲观亦或者乐观，唯一不变的就是变化。与其说需要适应的是疫情常态化下的生活，倒不如说需要适应的是在不断变化着的生活。日子都是要继续下去的，生命里的每一天都只会经历一次。</p>
<p>新年的第一天，撇开那些不快，回首过去的一年，依旧是收获满满：</p>
<p>如果说最开心的，莫过于和伟忠师兄合著的书籍正式出版上市，虽然卖出去的数量不到2000本，但是已经远超预期。可以说是圆了一个儿时的梦想。10多年前初一，当自己的作文被《石油工人报》作为一个豆腐块刊登出来的时候，不知满足的我，就幻想着有朝一日可以让自己的文字被印成铅字，真正的能有一本封面上写着自己名字的书。昔日骨子里尚存的一点点文艺气息，曾经幻想着可能是一部游记亦或是记录生活点滴足以温暖别人的文字。年岁渐长，那些年少时的梦想渐渐被尘封。</p>
<p>也许自己早已忘了，但也许不经意间就会以另一种方式实现。虽然没有最终卖文为生，但最终在华章卞编辑的帮助下，出版了一本技术类的书籍。也算是最终将自己的名字印在了封面上。</p>
<p>当然说起另一件非常值得纪念的事情，有幸被鹅厂技术人的纪录片《递归》的策划选中，参演了其中的一集。这一集的标题是<a href="https://url.cn/3qxKjvKf?sf=uri">!《鹅厂技术青年的模样》</a>，在里面讲述了自己加入腾讯前后的故事。采访过程很长，最终根据需要节选了一部分内容。其实最想说的一句话还是莫忘初心。“通过自己的知识、自己的代码去帮助别人，改变一些人的生活方式，让他们在生活中获取更多便利”。对于这样一份自己挚爱的事业和工作，遇到问题在所难免，要不断踏出自己的舒适圈，解决问题。</p>
<p>这一年是格外艰难的一年，那么坚持阅读一定是我这一年里做得最正确的选择，小视频会让人焦虑和空虚，那么读一些有挑战的书籍则更会让人安心。也许有时候我对这个世界的认知和认识与主流的观点有些许不同，在不断的阅读中，可以很容易找到共鸣。也同时从不同角度丰富了对这个世界对我们所生活环境的感知。希望新的一年可以继续坚持读书。</p>
<p>如果说对于新一年的期望，我希望选择”积跬步，至千里“作为新一年开篇词。希望新的一年里，可以坚持学习，坚持读书，点滴积累，不忘初心。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>ES字段类型简介</title>
    <url>/2021/07/cl0rhzoxw004372q15p6l213n/</url>
    <content><![CDATA[<h2 id="0x00-映射"><a href="#0x00-映射" class="headerlink" title="0x00. 映射"></a>0x00. 映射</h2><p>ES虽然不是传统的关系型数据库，但其依然具备字段类型和映射的属性。而映射的主要作用是定义文档(document)中字段的数据类型，决定了数据如何存储和索引。</p>
<p>字段类型可以通过ES动态指定，也可以通过模板指定。通过模板指定后若有新增字段也可以由ES动态指定。</p>
<p>通常在数据比较明确可控的情况下，通过模板来明确指定字段的数据类型，可以优化存储，并且便于进行一些特殊的查询。</p>
<span id="more"></span>

<h2 id="0x01-常用的字段类型"><a href="#0x01-常用的字段类型" class="headerlink" title="0x01. 常用的字段类型"></a>0x01. 常用的字段类型</h2><h3 id="别名类型-Alias-field-type"><a href="#别名类型-Alias-field-type" class="headerlink" title="别名类型(Alias field type)"></a>别名类型(Alias field type)</h3><p>别名字段是为文档中已有的字段创建一个别名。别名可以用于查询、聚合和排序等。但是别名不可用于写入或更新请求。别名的指向字段也不可以是<code>copy_to</code>或多重字段。</p>
<p>别名字段由于不存在于文档原文中，因此在原文字段过滤中不会生效。</p>
<p>在mapping中指定别名字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alias&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target_name&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>field_name</code>为新的别名字段，而其中的<code>path</code>字段则为目标字段。</p>
<h3 id="数组类型-Arrays"><a href="#数组类型-Arrays" class="headerlink" title="数组类型(Arrays)"></a>数组类型(Arrays)</h3><p>在ES中不存在一个特定的数组类型的数据类型，在ES中，任意一个字段都可以包含 0个或多个值，但是这些字段都必须是相同类型。</p>
<p>对于列表类型字段不需要提前特别指定。在查询过程中，若是命中列表中其中一个词条，则该文档会被选中。</p>
<h3 id="二进制类型-Binary-field-type"><a href="#二进制类型-Binary-field-type" class="headerlink" title="二进制类型(Binary field type)"></a>二进制类型(Binary field type)</h3><p>二进制类型字段接受使用Base64编码的二进制数据。默认不会被存储也不能进行检索。</p>
<p>在mapping中指定二进制字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;binary&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔类型-Boolean-field-type"><a href="#布尔类型-Boolean-field-type" class="headerlink" title="布尔类型(Boolean field type)"></a>布尔类型(Boolean field type)</h3><p>布尔类型接受Json中的<code>true</code>和<code>false</code>值，也接受代表true和false的字符串。</p>
<p>在mapping中指定二进制字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="日期类型-Date-field-type"><a href="#日期类型-Date-field-type" class="headerlink" title="日期类型(Date field type)"></a>日期类型(Date field type)</h3><p>JSON中没有日期类型，在ES中可以使用几种不同的方式表示：</p>
<ul>
<li>包含格式化日期的字符串，例如<code>2021-07-18</code>或者<code>2021/07/18 01:17:45</code>。</li>
<li>代表毫秒时间戳的数字。</li>
<li>代表秒级时间戳的数字。</li>
</ul>
<p>在ES内部，日期类型若包含时区则会被转换为一个UTC时区的毫秒时间戳进行储存。对时间类型的查询在内部均会被转换为long类型的范围查询。</p>
<p>在mapping中指定日期字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中的<code>format</code>字段表示时间格式，可以同时指定多种格式。</p>
<h3 id="地理坐标点类型-Geo-point-field-type"><a href="#地理坐标点类型-Geo-point-field-type" class="headerlink" title="地理坐标点类型(Geo-point field type)"></a>地理坐标点类型(Geo-point field type)</h3><p>地理坐标点类型字段支持经纬度对。可以用于做如下类型的查询：</p>
<ul>
<li>根据区间、根据到特定点的距离、或多边形查询坐标点。</li>
<li>根据地理信息或到特定点的距离来聚合文档。</li>
<li>将距离信息参与文档评分。</li>
<li>根据距离排序文档。</li>
</ul>
<p>在mapping中指定二进制字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="IP类型-IP-field-type"><a href="#IP类型-IP-field-type" class="headerlink" title="IP类型(IP field type)"></a>IP类型(IP field type)</h3><p>IP字段类型可以用于存储IPv4或IPv6地址。</p>
<p>在mapping中指定IP字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ip&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>IP字段可以用IP和子网前缀长度的方式来进行查询。</p>
<h3 id="关键字类型-Keyword-type"><a href="#关键字类型-Keyword-type" class="headerlink" title="关键字类型(Keyword type)"></a>关键字类型(Keyword type)</h3><p>通常用于储存结构化数据，例如ID、邮件地址、域名之类的信息。关键字类型不用于全文检索，主要用于排序、聚合和词条查询。</p>
<p>在mapping中指定关键字字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>数字字段类型映射：</p>
<p>并不是所有的数字字段都应当被映射为数字类型。ES使用数字字段进行range查询。而keyword类型更适合用于词条查询和聚合。对于一个数字字段是否要映射为keyword类型可以从几个角度来考虑：</p>
<ul>
<li>对这个字段不会使用range查询。</li>
<li>keyword类型比数字类型进行term查询时速度更快。</li>
</ul>
<h3 id="数值类型-Numeric-field-types"><a href="#数值类型-Numeric-field-types" class="headerlink" title="数值类型(Numeric field types)"></a>数值类型(Numeric field types)</h3><p>ES支持如下的数值类型：</p>
<ul>
<li>long、integer、short、byte</li>
<li>double、float、half_float、scaled_float</li>
<li>unsigned_long</li>
</ul>
<p>在mapping中指定数值字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在选择数值类型的选择上，应该尽可能根据数值范围选择较小的类型，可以加速查询，节约存储空间。</p>
<h3 id="对象类型-Object-field-type"><a href="#对象类型-Object-field-type" class="headerlink" title="对象类型(Object field type)"></a>对象类型(Object field type)</h3><p>ES中支持嵌套对象，在存储和索引时，结构会拍平，因此无需特意指定对象类型。</p>
<h3 id="区间类型-Range-field-types"><a href="#区间类型-Range-field-types" class="headerlink" title="区间类型(Range field types)"></a>区间类型(Range field types)</h3><p>区间类型代表一个上界和下界之间连续的值。可被用于查询和有限的聚合查询。支持直方图聚合以及独立值个数。</p>
<p>在mapping中指定区间字段的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer_range&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>对于区间类型可以进行term查询，只要查询的值在区间范围内，相应的文档就会被选中。</p>
<h3 id="文本类型-Text-field-type"><a href="#文本类型-Text-field-type" class="headerlink" title="文本类型(Text field type)"></a>文本类型(Text field type)</h3><p>文本类型主要用来索引全文字段，例如电子邮件的全文、产品描述等。内容会被传递给分词器进行分词处理，转换为一系列词条，并用来作为文档的索引。ES通过这些词条可以快速检索到这些全文文档。文本字段不能用于排序和聚合。</p>
<p>在mapping中指定文本类型的方法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;field_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是text类型的字段会被进行分词处理，因此会比较消耗写入性能。如果无需分词查询的字段则应当尽量使用Keyword类型来减少性能消耗。</p>
<p>对于既需要分词处理的又需要聚合的文本字段，可以使用多重字段。</p>
<h2 id="0x02-小结"><a href="#0x02-小结" class="headerlink" title="0x02. 小结"></a>0x02. 小结</h2><p>ES作为文档数据库使用时，最大的优势是不需要对文档中的字段类型进行提前定义，在文档写入时会自动判断并设置，便于使用。但是这种便利性也会造成性能和资源的损耗。像传统的关系型数据库那样通过模板指定字段类型虽然会些许麻烦，但是在整体写入性能、优化资源占用和查询的效率上会有较大的提升。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 共享内存模块简介</title>
    <url>/2021/04/cl0rhzoxx004872q14ysc9spk/</url>
    <content><![CDATA[<h2 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00. 概述"></a>0x00. 概述</h2><p>前些日子和同事讨论过一个有关Python中共享内存的问题，在这里稍作整理记录一下。</p>
<span id="more"></span>

<h2 id="0x01-什么是共享内存"><a href="#0x01-什么是共享内存" class="headerlink" title="0x01. 什么是共享内存"></a>0x01. 什么是共享内存</h2><p>共享内存指的是一块可以供多个进程访问的内存区域，该物理区域映射到不同进程的地址空间中，在访问该区域的数据时，无需进行额外的数据拷贝，因此对于跨进程交换数据而言，是一种最快的方式。同时，共享内存本身是不具有同步约束的，因此在使用共享内存时一定要自行控制好访问的同步问题。一般常用的方法是使用信号量来控制共享内存的同步。</p>
<p>在Linux系统中，通常共享内存区域的大小被限制在32MB以内。</p>
<p>共享内存有几种不同的方式，比较常用的有传统的SYS V的共享内存和基于mmap文件映射实现的共享内存。</p>
<p>在Linux环境中我们可以通过<code>ipcs</code>命令看到系统中的共享内存情况。</p>
<h2 id="0x02-一个Python共享内存的例子"><a href="#0x02-一个Python共享内存的例子" class="headerlink" title="0x02. 一个Python共享内存的例子"></a>0x02. 一个Python共享内存的例子</h2><p>shared_memory模块是Python3.8版本中新提供的一个模块。可以方便的使用和管理共享内存。该模块中的共享内存使用的是System V类型。</p>
<p>首先我们先看一个简短的例子。</p>
<p><code>main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> shared_memory</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> Struct, pack_into</span><br><span class="line"></span><br><span class="line">SHM_KEY = <span class="string">&#x27;PY_SHM_EXAMPLE&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShmExampleMainAPP</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shm = shared_memory.SharedMemory(SHM_KEY, <span class="literal">True</span>, <span class="number">8</span> + <span class="number">2048</span>)</span><br><span class="line">        self.buffer = self.shm.buf</span><br><span class="line">        pack_into(<span class="string">&#x27;I&#x27;</span>, self.buffer, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.struct = Struct(<span class="string">&#x27;II2048s&#x27;</span>)</span><br><span class="line">        self.round_counter = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_input</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&quot;place input data:&quot;</span>)</span><br><span class="line">        encode_data = data.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        data_length = <span class="built_in">len</span>(encode_data)</span><br><span class="line">        self.struct.pack_into(self.buffer, <span class="number">0</span>, self.round_counter + <span class="number">1</span>, data_length, encode_data)</span><br><span class="line">        self.round_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.handle_input()</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.shm.close()</span><br><span class="line">        self.shm.unlink()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = ShmExampleMainAPP()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>



<p><code>worker.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> shared_memory</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> Struct</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">SHM_KEY = <span class="string">&#x27;PY_SHM_EXAMPLE&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShmExampleWorkerAPP</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shm = shared_memory.SharedMemory(SHM_KEY, <span class="literal">False</span>, <span class="number">8</span> + <span class="number">2048</span>)</span><br><span class="line">        self.buffer = self.shm.buf</span><br><span class="line">        self.struct = Struct(<span class="string">&#x27;II2048s&#x27;</span>)</span><br><span class="line">        self.round_counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shm.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            r, s, data = self.struct.unpack_from(self.buffer)</span><br><span class="line">            data = data[:s]</span><br><span class="line">            <span class="keyword">if</span> r != self.round_counter:</span><br><span class="line">                <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>).upper())</span><br><span class="line">                self.round_counter = r</span><br><span class="line">            sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = ShmExampleWorkerAPP()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>在这个例子中，用主进程创建了一个8+2048B的空间并且接受用户输入，并且每次将当前的计数器和输入的字符长度作为元信息写在前8个字节中，用户输入的字符串则通过UTF8编码后写在后面的空间中。</p>
<p>在子进程中，我们则是读取共享内存区域并且将用户输入转换成大写后输出。</p>
<img src="/2021/04/cl0rhzoxx004872q14ysc9spk/01.png" class="">

<h2 id="0x03-multiprocessing-shared-memory模块"><a href="#0x03-multiprocessing-shared-memory模块" class="headerlink" title="0x03. multiprocessing.shared_memory模块"></a>0x03. multiprocessing.shared_memory模块</h2><p>在shared_memory模块中，主要有两个类可供使用：</p>
<ul>
<li>SharedMemory: 用于创建或挂载一块已经存在的共享内存块。</li>
<li>ShareableList: 一个元素都存储在共享内存中的类列表对象。</li>
</ul>
<p>除此之外，在multiprocessing.managers模块中也提供了一个管理类：</p>
<ul>
<li>SharedMemoryManager: 用于跨进程管理共享内存块。</li>
</ul>
<p>接下来逐一介绍一下：</p>
<h3 id="SharedMemory"><a href="#SharedMemory" class="headerlink" title="SharedMemory"></a>SharedMemory</h3><p>最基本的共享内存类，用于创建或者挂载共享内存块，每个共享内存块都有一个唯一的name标识。当一个进程创建了一个共享内存块后，其他进程就可以通过这个块的名称来挂载这个内存块。</p>
<p>对于一个共享内存块来说，由于它是进程间共享的资源，当一个进程不再使用这个内存块时，其他的进程有可能仍要使用这个内存块。因此在使用共享内存时，要格外注意它的生命周期管理。避免造成内存泄露。</p>
<p>当一个进程不再使用共享内存时，则需要调用close方法来停止该进程对这一块内存的访问。其底层实现本质是释放进程中的buf对象（即memoryview的一个实例）并且关闭mmap。调用close不会真的销毁这块内存区域。当全部进程都不再使用该共享内存块时，则需要调用<code>unlink</code>方法来请求销毁相应的内存区域。需要注意的是，<code>unlink</code>应当且只能被调用一次。</p>
<p>SharedMemory对象主要的使用方法是提供共享内存区域的memoryview供用户使用，即该对象的buf成员。可以通过struct模块进行操作，也可以作为numpy或者PIL的底层buffer出现直接进行操作。</p>
<h3 id="ShareableList"><a href="#ShareableList" class="headerlink" title="ShareableList"></a>ShareableList</h3><p>基于SharedMemory实现的类列表对象，本质就是为了方便用户通过内存来共享最基本的数据类型而存在的。这个列表中的元素支持int、float、bool、None和单个大小不超过10MB的字符串/字节数组。ShareableList对象通过一个初始序列创建，创建后则不能像内建的list对象一样进行append、insert等操作，也不能通过切片生成新的ShareableList对象。</p>
<p>从根本来讲，其实ShareableList就是根据初始传入的序列来为初始序列的每个元素预留了相应的内存空间并整体申请了一整块内存区域。可以对其中的元素进行修改，但是修改的限制是不能超过初始化时该位置元素的大小。</p>
<p>由此，可以简化一下上面的例子：</p>
<p><code>main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> shared_memory</span><br><span class="line"></span><br><span class="line">SHM_KEY = <span class="string">&#x27;PY_SHM_EXAMPLE&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShmExampleMainAPP</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shl = shared_memory.ShareableList([<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>], name=SHM_KEY)</span><br><span class="line">        self.round_counter = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(self.shl.shm.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_input</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&quot;place input data:&quot;</span>)</span><br><span class="line">        self.shl[<span class="number">0</span>] = self.round_counter + <span class="number">1</span></span><br><span class="line">        self.shl[<span class="number">1</span>] = data</span><br><span class="line">        self.round_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.handle_input()</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.shl.shm.close()</span><br><span class="line">        self.shl.shm.unlink()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = ShmExampleMainAPP()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p><code>worker.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> shared_memory</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">SHM_KEY = <span class="string">&#x27;PY_SHM_EXAMPLE&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShmExampleWorkerAPP</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shl = shared_memory.ShareableList(<span class="literal">None</span>, name=SHM_KEY)</span><br><span class="line">        self.round_counter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shl.shm.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            r, data = self.shl[<span class="number">0</span>], self.shl[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> r != self.round_counter:</span><br><span class="line">                <span class="built_in">print</span>(data.upper())</span><br><span class="line">                self.round_counter = r</span><br><span class="line">            sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = ShmExampleWorkerAPP()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>在这个优化后的例子中，由于使用了ShareableList对象，当内部存储字符串时，它管理了字符串的长度等信息，因此用户也就无需在元信息中保存数据的长度信息了。</p>
<h3 id="SharedMemoryManager"><a href="#SharedMemoryManager" class="headerlink" title="SharedMemoryManager"></a>SharedMemoryManager</h3><p>与<code>multiprocessing.Manager</code>类似，都是一个独立的进程对象，SharedMemoryManager（下面简称为SMM）类在用户调用了其实例的<code>start</code>方法后，会启动一个独立的进程用来响应用户的创建共享内存请求，并且管理其创建的共享内存的整个生命周期。</p>
<p>SMM对象作为一个高级API可以极大的降低使用共享内存的难度，可以不用去刻意关注所使用的共享内存区域的释放。使用完毕之后调用SMM对象的<code>shutdown</code>方法即可非常方便的关闭其创建的全部共享内存。</p>
<p>不过作为SMM对象，使用方便的代价是它会作为一个独立进程存在，对于很多使用场景来说，有一些过于“重”了。</p>
<p>SMM对象提供了两个方法，<code>SharedMemory</code>和<code>ShareableList</code>，用来创建相应的对象。</p>
<p>对刚才的例子稍作修饰：</p>
<p><code>main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> managers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShmExampleMainAPP</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.smm = managers.SharedMemoryManager()</span><br><span class="line">        self.smm.start()</span><br><span class="line">        self.shl = self.smm.ShareableList([<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">        self.round_counter = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(self.shl.shm.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_input</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&quot;place input data:&quot;</span>)</span><br><span class="line">        self.shl[<span class="number">0</span>] = self.round_counter + <span class="number">1</span></span><br><span class="line">        self.shl[<span class="number">1</span>] = data</span><br><span class="line">        self.round_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.handle_input()</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.smm.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = ShmExampleMainAPP()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p><code>worker.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> shared_memory</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShmExampleWorkerAPP</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.shl = shared_memory.ShareableList(<span class="literal">None</span>, name=name)</span><br><span class="line">        self.round_counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.shl.shm.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            r, data = self.shl[<span class="number">0</span>], self.shl[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> r != self.round_counter:</span><br><span class="line">                <span class="built_in">print</span>(data.upper())</span><br><span class="line">                self.round_counter = r</span><br><span class="line">            sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    shm_key = <span class="built_in">input</span>(<span class="string">&#x27;place input shm key:&#x27;</span>)</span><br><span class="line">    app = ShmExampleWorkerAPP(shm_key)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<img src="/2021/04/cl0rhzoxx004872q14ysc9spk/02.png" class="">

<p>在这个例子中，各种操作都比一开始的例子简单了很多。不过由于SHM的实现机制，不能再使用事先约定好SHM_KEY的方式在其他进程中挂在相应的共享内存区域了，只能通过其他方式将创建好的共享内存对象的key传递给其他的进程。</p>
<h2 id="0x04-几个典型的使用场景"><a href="#0x04-几个典型的使用场景" class="headerlink" title="0x04. 几个典型的使用场景"></a>0x04. 几个典型的使用场景</h2><p>通过上面的例子不难发现，共享内存虽然是非常高效的跨进程通信方案，但是同样使用复杂度也是最高的，需要用户自行控制进程间的同步问题。对于Python应用而言在很多场景下这种复杂度换回的效率提升其实是得不偿失的。</p>
<p>那么一般需要在什么场景下使用这种方式来进行跨进程通信呢？</p>
<ol>
<li><p>共用数据集</p>
<p>共用数据集是最常见的使用场景之一了。例如在做AI训练时，可以将数据集加载在共享内存区域中同时提供给多个进程进行训练。由于训练进程对于数据集本身都只有读操作，因此也不用担心进程同步和读写冲突的问题了。这个场景下可以极大的节约内存空间并且减少主进程到训练进程间的数据拷贝，从而提升整体的资源利用效率。</p>
</li>
<li><p>与不同语言实现的需要大量数据通信的程序间进行交互</p>
<p>一个最典型的例子是在音视频领域，可以将Python程序实时生成的图像数据通过共享内存的方式输出给ffmpeg进行实时的编码和串流操作。同样，反向的操作也是可行的，通过ffmpeg捕获视屏数据解码后通过共享内存的方式输出到我们的Python分析程序中对画面元素进行分析。</p>
</li>
<li><p>作为信号之外的另一种通知方式</p>
<p>线上程序对配置的热加载，我们通常是通过发送信号来通知进程去进行配置更新的，但是除了发送信号之外，修改共享内存同样是一种可行的处理方案。我们可以让线上程序去监听某一个共享内存的区域，与此同时，我们在需要热更新配置时，只需要通过外围脚本将新的配置写到共享内存区域并且修改相应的标志位，线上程序即可通过一次内存拷贝将新的配置读取到自己的私有内存空间中了。</p>
</li>
</ol>
<p>当然还有一些其他场景适合使用共享内存进行进程间的通信和数据同步，在这里就不一一列举了。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行时钟流工具</title>
    <url>/2021/01/cl0rhzoxz004b72q1c79phh5h/</url>
    <content><![CDATA[<h2 id="0x00-什么是时钟流"><a href="#0x00-什么是时钟流" class="headerlink" title="0x00. 什么是时钟流"></a>0x00. 什么是时钟流</h2><p>在直播领域，通常会使用一路画面中包含当前精确时间画面的视频流结合推送端（主播）和播放端（观众）的画面来判断流的传播延迟，用于问题定位和调优。这样一路特殊的视频流叫做时钟流。</p>
<p>那么在通常使用的过程中，如果生成一路时钟流呢？最简单的办法是点开windows右下角的时间窗口，捕获整个桌面的画面并使用推流工具推流，就得到了一路时钟流。</p>
<span id="more"></span>

<h2 id="0x01-命令行生成时钟流"><a href="#0x01-命令行生成时钟流" class="headerlink" title="0x01. 命令行生成时钟流"></a>0x01. 命令行生成时钟流</h2><p>如同第一节中所说，可以非常简单的生成一路时钟流，为什么还需要一个命令行工具来生成时钟流呢？</p>
<p>其实关于第一段的描述中，不难发现上述一路时钟流推送虽然非常简单，但同样有一个非常大的限制条件——必须有一个可以捕获画面的图形界面。这个限制在日常工作中是非常让人头疼的。在一些实际场景中，可能会有某个地区的主播反馈视频延迟高，那么为了模拟这个主播实际推流的情况，就需要在主播所在地进行模拟推流测试。不可能每次都麻烦主播进行推流测试。更何况往往问题定位和调优都是需要花费较长时间的，作为开发也希望能更方便地使用这项能力。</p>
<p>因此，在实际的运营中，通常会使用不同地区的服务器充当测试机进行推流测试，然而，线上的服务器都是没有图形界面的Linux服务器，那么就必须要有一款能在命令行界面下正常生成时钟流并且进行推流的工具来协助工作。</p>
<p>需要解决的问题就可以分为两个步骤，其一是如何在命令行下生成一路时钟流，其二是如何将这路时钟流推送出去。</p>
<h2 id="0x02-时钟流的生成"><a href="#0x02-时钟流的生成" class="headerlink" title="0x02. 时钟流的生成"></a>0x02. 时钟流的生成</h2><p>想要得到一路时钟流，在纯命令行的系统里面，是不能奢望通过捕获的方式获得一路流了。那么就必须通过程序生成的方式获取一路流。</p>
<p>如何生成一路流呢？进一步思考，可以想到，其实一路流的本质就是按照一定的速度（帧率）将画面推送出去，那么只要能按照规定的帧率生成足够数量的单幅画面并且保证画面上包含时间信息就OK了。</p>
<p>那么现在只需要解决生成单幅画面的问题即可。说到生成单幅画面，最容易想到的方式就是用PIL直接绘图即可。为了中间尽可能减少处理过程，只用生成黑色背景白色文字的二值化图像即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_clock_image</span>():</span><br><span class="line">     im = Image.new(<span class="string">&#x27;1&#x27;</span>, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">     draw = ImageDraw.ImageDraw(im)</span><br><span class="line">     draw.text((<span class="number">100</span>, <span class="number">100</span>), <span class="built_in">str</span>(datetime.now()), fill=<span class="string">&#x27;white&#x27;</span>, font=ImageFont.truetype(<span class="string">&#x27;arial.ttf&#x27;</span>, <span class="number">30</span>))</span><br><span class="line">     <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line">im = gen_clock_image()</span><br><span class="line">im.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>于是就可以得到下面的图片了</p>
<img src="/2021/01/cl0rhzoxz004b72q1c79phh5h/1.png" class="">

<p>那么接下来的工作就是需要按照一定时间来生成图片序列即可。</p>
<h2 id="0X03-时钟流的推送"><a href="#0X03-时钟流的推送" class="headerlink" title="0X03. 时钟流的推送"></a>0X03. 时钟流的推送</h2><p>命令行推流的工具其实没有什么好纠结的，当然只有大名鼎鼎的ffmpeg。只要在启动的时候进行推流参数的设置即可。需要注意如下的几个参数：</p>
<ul>
<li>y: 覆盖输出</li>
<li>f: 第一个是输入文件格式，通常会自动根据文件来判断，由于生成的是二值化的图片，不带有任何头信息所以选择<code>rawvideo</code>来指定输入格式。</li>
<li>c:v: 输入视频编码，设置<code>rawvideo</code></li>
<li>pix_fmt: 像素格式，<code>monob</code>，和PIL里的<code>1</code>一致，都代表一个像素1bit的二值化像素排列。</li>
<li>s: 输入画面大小，<code>800x600</code>。</li>
<li>r: 输入帧率，<code>30</code>fps。</li>
<li>i: 输入数据地址，<code>-</code>，在程序中通过pipe将数据通过stdin输入。所以这里用<code>-</code>。</li>
<li>c:v: 输出视频编码，设置<code>libx264</code></li>
<li>s: 输入画面大小，<code>800x600</code>。</li>
<li>r: 输入帧率，<code>30</code>fps。</li>
<li>f: 输出格式，<code>flv</code>。</li>
<li>preset: x264的参数主要调节编码速度和质量的平衡，为了中间处理损耗小，选择最快的<code>ultrafast</code>。</li>
<li>pix_fmt: 输出像素格式，<code>yuv420p</code>，使用最简单的yuv420p的排列就好。</li>
</ul>
<p>参数列表差不多就是这些，其中一部分数据在推送的时候通过程序进行设置即可。</p>
<h2 id="0x04-代码实现"><a href="#0x04-代码实现" class="headerlink" title="0x04. 代码实现"></a>0x04. 代码实现</h2><p><code>ClockVideo.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClockVideo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height, fps, rtmp_path</span>):</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.fps = fps</span><br><span class="line">        self.font = ImageFont.truetype(<span class="string">&#x27;arial.ttf&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">        self.rtmp_path = rtmp_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ffmpeg_proc</span>(<span class="params">self</span>):</span><br><span class="line">        command = [<span class="string">&#x27;ffmpeg&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-y&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;rawvideo&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-vcodec&#x27;</span>, <span class="string">&#x27;rawvideo&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-pix_fmt&#x27;</span>, <span class="string">&#x27;monob&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-s&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;self.width&#125;</span>x<span class="subst">&#123;self.height&#125;</span>&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-r&#x27;</span>, <span class="built_in">str</span>(self.fps),</span><br><span class="line">                   <span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-c:v&#x27;</span>, <span class="string">&#x27;libx264&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-s&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;self.width&#125;</span>x<span class="subst">&#123;self.height&#125;</span>&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-r&#x27;</span>, <span class="built_in">str</span>(self.fps),</span><br><span class="line">                   <span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;flv&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-preset&#x27;</span>, <span class="string">&#x27;ultrafast&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;-pix_fmt&#x27;</span>, <span class="string">&#x27;yuv420p&#x27;</span>,</span><br><span class="line">                   self.rtmp_path</span><br><span class="line">                   ]</span><br><span class="line">        <span class="keyword">return</span> subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_clock_image</span>(<span class="params">self, dt</span>):</span><br><span class="line">        im = Image.new(<span class="string">&#x27;1&#x27;</span>, (self.width, self.height))</span><br><span class="line">        draw = ImageDraw.ImageDraw(im)</span><br><span class="line">        draw.text((<span class="number">100</span>, <span class="number">100</span>), dt, fill=<span class="string">&#x27;white&#x27;</span>, font=self.font)</span><br><span class="line">        <span class="keyword">return</span> im.tobytes()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        ffmpeg_proc = self.get_ffmpeg_proc()</span><br><span class="line">        real_count = count = <span class="number">0</span></span><br><span class="line">        hz = <span class="number">10</span> ** <span class="number">9</span> / self.fps</span><br><span class="line">        last_print_time_ns = last_output_time_ns = time.time_ns()</span><br><span class="line">        delay_fps = <span class="number">0</span></span><br><span class="line">        change_times = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            dt = <span class="built_in">str</span>(datetime.now())</span><br><span class="line">            image = self.gen_clock_image(dt)</span><br><span class="line">            real_count += <span class="number">1</span></span><br><span class="line">            now_time = time.time_ns()</span><br><span class="line">            <span class="keyword">if</span> now_time - last_output_time_ns &gt; hz:</span><br><span class="line">            	<span class="comment"># 通过管道向ffmpeg写入数据</span></span><br><span class="line">                ffmpeg_proc.stdin.write(image)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                last_output_time_ns = time.time_ns()</span><br><span class="line">            <span class="comment"># 每一秒输出一次统计信息</span></span><br><span class="line">            <span class="keyword">if</span> now_time - last_print_time_ns &gt; <span class="number">10</span> ** <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;dt: <span class="subst">&#123;dt&#125;</span>, gen <span class="subst">&#123;real_count&#125;</span>fps, push <span class="subst">&#123;count&#125;</span>fps, hz: <span class="subst">&#123;hz:<span class="number">.2</span>f&#125;</span>, delay: <span class="subst">&#123;delay_fps:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="comment"># fps 矫正</span></span><br><span class="line">                <span class="keyword">if</span> count &lt; self.fps:</span><br><span class="line">                    delay_fps += <span class="number">0.2</span> * change_times</span><br><span class="line">                    hz = <span class="number">10</span> ** <span class="number">9</span> / (self.fps + delay_fps)</span><br><span class="line">                <span class="keyword">elif</span> count &gt; self.fps:</span><br><span class="line">                    delay_fps -= <span class="number">0.1</span> * change_times</span><br><span class="line">                    hz = <span class="number">10</span> ** <span class="number">9</span> / (self.fps + delay_fps)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    change_times = change_times * <span class="number">0.1</span> <span class="keyword">if</span> change_times &gt;= <span class="number">0.001</span> <span class="keyword">else</span> change_times</span><br><span class="line">                real_count = count = <span class="number">0</span></span><br><span class="line">                last_print_time_ns = now_time</span><br></pre></td></tr></table></figure>

<p><code>main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ClockVideo <span class="keyword">import</span> ClockVideo</span><br><span class="line"></span><br><span class="line">SIZE = (<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">FPS = <span class="number">30</span></span><br><span class="line">RTMP_URL = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = ClockVideo(</span><br><span class="line">        *SIZE,</span><br><span class="line">        FPS,</span><br><span class="line">        RTMP_URL</span><br><span class="line">    )</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>在同目录下需要自行拷贝一个字体文件，我选择的是<code>arial.ttf</code>，并且修改初始化时候的字体名称。</li>
<li>推送的机器上需要预装ffmpeg和Python3。</li>
<li>需要安装PIL。</li>
<li>RTMP_URL需要替换为具体的推流地址。</li>
</ol>
<p>最后进行推流测试，可以看到如下的输出：</p>
<img src="/2021/01/cl0rhzoxz004b72q1c79phh5h/2.png" class="">

<p>通过对比终端中打印的时间和拉到流画面上的时间即可知道推流端到播放端延迟情况。</p>
<h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05. 小结"></a>0x05. 小结</h2><p>这个小工具是在工作中为了解决某个产品海外主播反馈的延迟问题定位时随手开发的。代码很简单，但是可以解决一个非常有趣的实际问题。</p>
<p>更进一步思考，这个工具除了用作推送时钟流进行问题定位之外，还可以结合反向操作为一个直播的延迟监控工具出现。</p>
<p>如何做一个延迟监控工具呢：</p>
<ol>
<li>通过ffmpeg拉流</li>
<li>解码为二值化的图像输出到管道</li>
<li>Python程序进行图像裁剪并OCR</li>
<li>对推送时间和接收时间做差，上报延迟曲线，设置阈值告警。</li>
</ol>
<p>不过因为还有很多重要的事情要做，后续的一部分工作就留给感兴趣的同学自己试试吧。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>开发</tag>
        <tag>Python</tag>
        <tag>直播</tag>
      </tags>
  </entry>
  <entry>
    <title>致站台</title>
    <url>/2021/11/cl0rhzoy0004g72q125st8j3d/</url>
    <content><![CDATA[<p>写在前面的话：</p>
<p>十年前，去离家千里外的省城读高中，从此故乡只有冬夏再无春秋，一次归家返校后有感而发写下了这篇文章。有感于父爱无言，总是默默在背后支持我的每一次前行，纵使自己受尽委屈。</p>
<p>上月初，父亲在外骑行不幸罹难，恍恍惚一个月已经过去了，似梦似醒。翻出旧文，以表哀思。</p>
<hr>
<span id="more"></span>

<p>致，用文表意，用心表情。致站台，我对你的低语。不觉间，我眼中的你，已不只是你。</p>
<h2 id="一、等待"><a href="#一、等待" class="headerlink" title="一、等待"></a>一、等待</h2><p>再相见时，我又是归人了吧？</p>
<p>站台，你好像永远在不知疲倦中等待，等待着远方驶来的列车，又望着它们在汽笛的啸叫中渐行渐远；等待着不知归期的旅人，与那沉甸甸的行囊，不曾想过，归期的身后是别日，注定漂泊的人终究不会停留，对于你而言，每一次悠远的等待，迎不来的，是归期，送不走的,是别日。</p>
<p>是这样吗？不是这样吗，我的父亲？每一次都是还没来得及接过我手中归程的票根却又不得不从小站的窗口取回那张通往彼岸的单程票。你每一次的等候，每一次对一个注定漂泊的人的等候又为你带来了什么呢？</p>
<p>记得小时候，每逢你外出归来，我总会从你手中夺过那沉甸甸的行囊去收获属于我的欢乐。只因每一次你都会为我精心的准备一份礼物。</p>
<p>时过境迁，不知何时我们的身份却悄悄的发生的转变。此刻接过行李的人，是你，而我，却不能像幼时你为我带来欢乐那样给你送去一丝愉快，我唯一能做的，就是从那沉重不堪的行囊中取出一份惨淡的成绩单，然后迎着你充满希冀的目光道一声“只有这些了。”不用多问，你心里中的感受我自是明了，满目苍凉，支离破碎的是希望，而剩余的，只有无尽的失望。</p>
<p>而你却依旧等待，半载久候，一刻相逢，就在这短短的一刻，你也不忘给予我更多：你说，东街上又有一家餐馆开张了，味道不错，要不要一起去尝尝；你说，夜市上那个卖羊拨拉的师傅又回到了老地方，要不要去那吃个夜宵；你说，街角九阳豆浆馆外卖的豆浆很好喝，如果我想喝，明早你就去买……</p>
<p>说实话，我宁愿和你一起在厨房里忙碌，谈论一些身边的琐事，随手在布满雾气的窗户上写写画画，并不忘顺便将案上刚出锅的菜夹一筷头送入嘴中，不觉间，盘中的菜已剩不多，面对母亲责怪的目光，我们却又同时答道“尝咸淡。”我宁愿请你帮我煮方便面做夜宵，不为别的，也许正是因为习惯了那碗底藏着的一个鸡蛋吧。当然，早晨你做的醪糟鸡蛋也是我的最爱……</p>
<p>每至别时，你便又开始盘算，“这一次回来，还没来得及带你去东街的那家店尝尝呢；移动硬盘里还有好多你喜欢的电影也没来得及让你看呢……”似乎每一次都是这样，每一次都不可避免的为你留下这样那样的遗憾。</p>
<h2 id="二、停留"><a href="#二、停留" class="headerlink" title="二、停留"></a>二、停留</h2><p>站台，似水流年，几十年的孑然孤立，看遍了相逢，见惯了离别，你的心是否早已麻木，车去车归，人来人往，你为每一个人贴上“旅人”或“归人”的标签。</p>
<p>古老的小站，昏暗的灯光，简陋的候车厅里穿堂风嗖嗖的刮过，几分寒意，夜已深，灯火阑珊，车未至，笛先闻，一窗之隔却是久久的凝望，片刻停留，候车厅外的身影有是谁的守望，多少情思，一个人的站台，其实很拥挤。</p>
<p>夜幕降临，是别时了，执意相送，却不惜二十里孤行。时至子时，你的心，我懂。多少次欲言又止，其实一切尽在不言中，记得踏入站台时的那一瞬相拥吧？读懂了太多，希望、担忧、祝福、勉励、警醒……无所不含，却又什么也不必说出来，你懂，我懂。</p>
<p>站台，这其中的种种，你也一定懂吧？那一刻的停留是不舍。我为站台、为时光、为自己而停留。一个人的站台，其实很拥挤。站台，会不会有一天，当我步出列车时你已不再，迎接我的，是否只会剩下一片冰冷的繁华？在我心里，你，永远无法被取代。</p>
<h2 id="三、彼岸"><a href="#三、彼岸" class="headerlink" title="三、彼岸"></a>三、彼岸</h2><p>站台，你是征途中的驿站，你总是将我送向一个又一个未知的彼岸，我不晓得你是否熟谙彼岸的方向。每当我到达彼岸时，才忽而醒悟，来时的起点才是内心最终的归宿，新的旅途中总会迷失了家的方向，不过，正是因为身后有你的存在，才使我不去惧怕漂泊，从一个彼岸到另一个彼岸。累了，你总会告诉我家的方向。你总会在那里守望着我的归来。</p>
<p>从此不再惧怕漂泊，不再恐惧未知的彼岸，也许你比我更了解心的方向。</p>
<p>熟悉的此岸，有我所挚爱的，有我所厌倦的，忍不住，依旧是要奔向远方，站台，你送我去彼岸，是不是只有到了彼岸才能知晓余光中《乡愁》中的用词浅浅、感情深深？</p>
<p>当我有足够的勇气去压抑、去消磨心底那对未知的恐惧、去面对未来时，却发现站台，你渐行渐远，早已在我的身后，成为另一个彼岸，一个再也回不去的彼岸。</p>
<p>世界上总有那么一些距离，你在此刻可以穿越，而到了下一刻，你却再也回不去了，当你在记忆中寻觅那个远去的站台时，心里又会何等的惋惜，想去用心好好的爱一次，却发现，不曾珍惜的往昔再也回不去了，是否又会是一生的遗憾？</p>
<p>不久，又将是归程，再相见时，我又是归人了吧。几度漂泊，几度守望？</p>
<p>站台，你送我去彼岸，你让我更勇敢去等候，去停留，去行进，紫陌红尘，黄泉碧落，依旧故我。</p>
<p>段艺</p>
<p>2011 于兰州</p>
<hr>
<p>后记：</p>
<p>转眼间10年就过来了，还记得那时候趴在附中淡蓝色的课桌边，一笔一划在稿纸上写下这篇文章。郁郁而不得志，如今想来，可能学科竞赛真的不是一条适合自己的路，但那时候却又那么执着于此。总在想着，父母为自己做了那么多，但是自己却总让他们失望。</p>
<p>时间一天天的流过，十年也不过一挥手。</p>
<p>对于父亲的期望，我用了十年的时间，来填写案上这张答卷，却也不敢说，是否真的能不再让他失望。或许，在某一天，已经达到了他的期望，亦或许对于我，他还有着更高的期许，需要我去努力。而这一切已经无从知晓，也许唯有继续努力下去，顺着这条路义无反顾，才能在未来不去后悔吧。</p>
<p>难过与彷徨都只能属于深夜，而太阳升起时，又将是新的一天。勤勉，自律是属于他的标签，努力践行他一生所恪守的品行，就是对他最大的怀念了吧。</p>
<p>我告诉自己，要听父亲的话，好好生活。</p>
<p>段艺</p>
<p>2021 于深圳</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>香辣鱿鱼虾干锅</title>
    <url>/2021/09/cl0rhzoy1004j72q1hbcp7o15/</url>
    <content><![CDATA[<h2 id="0x00-回忆"><a href="#0x00-回忆" class="headerlink" title="0x00. 回忆"></a>0x00. 回忆</h2><p>在开设博客的第一天，就想过要分享一些烹饪的点滴。但是又因为懒惰，一直未曾动笔。这次借着参加部门的“心动厨房”活动，终于是有了第一篇美食笔记，没错，严格来说算不得菜谱，就是一篇做菜时的笔记。</p>
<span id="more"></span>

<p>一直在想，用一道什么样的菜来参加这样的活动呢，细细算来，自己手里做出能端的上桌的菜也有小几十种，可是，对我来说最有感情的两道菜当是麻婆豆腐和鱿鱼虾的干锅。</p>
<p>说起麻婆豆腐，2016年在北京实验室做项目的时候，因为进展不顺利，再加上一些其他的事情，很长一段时间都很不开心。12月14日，知道了我的近况，好友郭诗敏送我了一本《一人食》，书衣上的一句“一人食，一个人也要好好吃饭，一个人，也要过得精致温暖”。触动很大，于是，就从书上的第一道菜麻婆豆腐开始，开启了我认认真真用心烹饪的时光。</p>
<p>而鱿鱼虾的干锅，则对我来说更多的是对儿时的记忆，这道干锅便是一大家人聚餐时餐桌上的常客，两位姑父都能非常好的用自己的方式来演绎这道美食，谈笑举杯间，锅中外酥里嫩的大虾，弹牙爽口的鱿鱼，软烂入味的青笋和锅底吸满酱汁的薯条顷刻见底，只需要稍微添些早已备好的底料和一壶开水，则又成为一锅热气腾腾的火锅。牛羊肉卷，毛肚宽粉，稍微烫煮，蘸着碗中的麻酱小料，便是美味时刻的延续。宴席过半，长辈们把酒畅谈，小辈们悉数退席，围坐在书房电脑旁一起玩游戏，各自欢乐。</p>
<p>年岁渐长，转眼间离乡在外十载有余，每每面对这道菜，便知余光中《乡愁》中的用词浅浅、感情深深。</p>
<h2 id="0x01-备料"><a href="#0x01-备料" class="headerlink" title="0x01. 备料"></a>0x01. 备料</h2><p>说起鱿鱼虾的主料，那么自然是鱿鱼和虾。鱿鱼在烹制后会缩水，再加上自身含水量比较大，通常在准备时会略多些，3~4人份，三条大鱿鱼外加一斤多点的虾足以。而对于虾的种类则没有太多要求。有活虾自是最好，冻虾也未尝不可，对于这样一道口味较重的菜肴，丰俭由人。</p>
<p>辅料的选择其实没有固定的套路，通常在外面的店里更多的作用是为了撑起锅子，不显得太过寒酸，至今记得以前店里卖的八两鱿鱼八两虾便是大锅。我个人比较喜欢用青笋和薯条作为最基本的配菜，青笋经过烫煮后留有清香，可以缓解干锅油腻和厚重的口味，而绿叶蔬菜太过于吸油和软烂，不论口感还是卖相都要差些，因此青笋算是配菜中的最佳选择。薯条经过油炸后会变得疏松，垫在锅底吸收酱汁后便是全部精华的所在。若是食客多时，还会适当加一些年糕或者魔芋豆腐之类，吸满汤汁后也是极为美味的。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/1.jpeg" class="">

<p>在这一次的制作中，在常规的配菜之外，我又额外的准备了一份鱼豆腐。</p>
<p>鱿鱼清洗干净，青笋去皮只留笋芯，冷冻的薯条无需解冻，直接装盘即可，虾子的处理会稍显繁琐，需要认真的用厨房剪剪去虾脚、虾枪和虾须，最好把虾头虾眼之前的部分全部剪去。这些细小的部分在后期的油炸过程中非常容易焦糊，影响整体的口味。</p>
<p>最后莫要忘了准备几瓣大蒜，姜片和小米辣。</p>
<h2 id="0x02-切配"><a href="#0x02-切配" class="headerlink" title="0x02. 切配"></a>0x02. 切配</h2><p>基本的材料备齐之后，就可以准备进行切配工作了。起锅烧油，适当多些，我们用来炸薯条，另一个灶眼则起锅烧水，准备用来烫煮辅料。</p>
<p>油温70度左右就可以将薯条下锅了，维持温度小火慢炸。用筷子轻轻将薯条相互分开避免粘连。注意一次下锅的不要太多，另外就是薯条淀粉含量高，非常容易粘锅，建议可以使用不锈钢的油炸锅进行炸制，或者空气炸锅也好。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/2.jpeg" class="">

<p>薯条炸好需要一点时间，在这个空档里面我们首先要把青笋切小滚刀块，鱼豆腐对角切开。灶上的水开再丢一小勺盐打底，滴入几滴清油后下入青笋块转中火烫煮。</p>
<p>同时可以开始处理虾，先前已经基本洗净，只需要进行开背去虾线即可。</p>
<p>鱿鱼身切花刀，鱿鱼须大约三根一组切开，虽然老师傅都会用斜45度甚至30度去切花刀以保证鱿鱼花足够大，但是自愧刀工不行，只能直上直下。切好花刀后改刀切成长条。这样当遇热后鱿鱼就会成鱿鱼卷了。注意花刀是切在白色一面的。</p>
<p>在切花刀的中间需要注意通常一锅炸不下薯条的话可以捞出炸第二锅了，笋煮到可以轻松插入筷子便可以捞出。下入鱼豆腐继续烫煮。</p>
<p>如果时间把握的不错的话，第二锅的薯条和鱼豆腐应该差不多可以同时出锅，此时鱿鱼花刀也应该切好了。</p>
<p>薯条需要炸到通体金黄，外壳要硬，如果用筷子夹起来还是软塌塌的是不行的。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/3.jpeg" class="">

<p>油锅关火，开水锅转大火。倒入刚才切好的鱿鱼片进行烫煮，水开后立刻捞出，不能久煮，否则鱿鱼口感就和吃橡胶别无二致。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/4.jpeg" class="">

<h2 id="0x03-炒制"><a href="#0x03-炒制" class="headerlink" title="0x03. 炒制"></a>0x03. 炒制</h2><p>前期的准备工作基本就都完成了，炒制的工作建议放在开饭前进行，若是太早，炒好后虾壳回潮，味道就会差一些了。</p>
<p>起锅烧油，可以略微多一些，油温100度左右的时候可以快速下薯条复炸一下，维持薯条酥脆的口感，快速捞出，待油温稍微再稍微升高，立刻下入虾子转中火，一面定型后翻过面炸第二面，注意一定不要火太大，否则虾壳很容易炸糊，会让整道菜都带有一点苦味，就翻车了。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/5.jpeg" class="">

<p>另一面也炸定型之后，捞出开大火升温，复炸，迅速捞出，这一步主要目的是为了让虾壳变得酥脆，可以在吃虾的时候不用剥壳。炸虾的时候有一个小小的细节，可以在第一面基本炸好的时候用锅铲按一下虾头，这样会煎出虾油，味道整体会好很多。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/6.jpeg" class="">

<p>外酥里嫩的开背虾出锅！</p>
<p>锅底留油略多一点较好，适当打一下浮渣，重新开火，下入一小把花椒、一个八角、两片香叶和一小块桂皮，转小火慢慢煎一下，待香料出香后捞出弃用。接着下入两汤匙郫县豆瓣、蒜瓣、姜片、小米辣和适量干辣椒小小火慢炒出红油，这一步一定一定火要小，豆瓣易糊，如果炸糊了，这锅料油就基本废了。炒出红油后下入炸好的虾和焯过水的鱿鱼，转大火翻炒，保证酱汁能均匀接触到食材。</p>
<p>转小火调味，一勺砂糖，一勺鸡精，半勺花椒粉和小半勺盐，一大勺生抽从锅边淋入，再次转大火翻炒几下关火即可。</p>
<p>如果锅里主料少的话关火后可以把青笋、鱼豆腐等辅料放在锅里一起再翻两下，使得辅料更容易入味。如果主料多的话则不用这步，因为放进来也翻不了，所以一开始做料油的时候就不能吝啬，否则装盘后辅料味道会寡淡很多。</p>
<p>如果对自己调味没有太大把握的话，上面的各种步骤可以使用半块火锅底料代替，即，下火锅底料，炒化，下主料，翻炒，出锅。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/7.jpeg" class="">

<h2 id="0x04-出菜"><a href="#0x04-出菜" class="headerlink" title="0x04. 出菜"></a>0x04. 出菜</h2><p>先前的配菜都可以倒入容器中垫底，从锅中将鱿鱼虾和酱汁倒入容器里，撒上一层小葱花和白芝麻，点缀几根香菜便可出菜了。</p>
<p>这里必须要夸一下大宇锅的颜值，使得这个锅被我用来当容器的时刻远远大于被我当做锅来用的时候。</p>
<img src="/2021/09/cl0rhzoy1004j72q1hbcp7o15/8.jpeg" class="">

<h2 id="0x05-后记"><a href="#0x05-后记" class="headerlink" title="0x05. 后记"></a>0x05. 后记</h2><p>一份简简单单的香辣鱿鱼虾就完成了，适合亲友小聚，一份鱿鱼虾奉上，香辣开胃。快速消灭完干锅后加入火锅底料和开水就可以继续涮煮其他食材，热热闹闹又不嫌寡淡。</p>
<p>出门在外，一个人也要记得好好吃饭。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>美食</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>美食</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年终随感</title>
    <url>/2022/01/cl0rhzoy2004o72q1f51nbqmm/</url>
    <content><![CDATA[<p>转眼间一年又过来了。</p>
<p>有所失，有所得。每当到了一年要结束回首过去的时候，不自觉的都会去慨叹一年过得太快了，总是留下太多的遗憾。</p>
<p>在一年前，我写下了“积跬步，至千里”，希望自己能积累点滴，让自己的生活变得更充实一些。</p>
<p>在这一年的时间里，读完了20本书。在不规律的双城生活中，在放弃和坚持的挣扎中断断续续的运动终于甩掉了8公斤的赘肉。不再熬夜，坚持早起。</p>
<span id="more"></span>

<p>很多人都把这一年称为魔幻的一年，疫情肆虐下，打破了大家对于原有生活的认知。年末重读《三体》时，一个念头从脑海中闪过，会不会从某种角度讲，对于人类这个文明，已经是一个新的纪元，只是我们作为纪元更迭时刻中跨越两段历史的存在，生活的惯性让我们在期望一切回归从前和对现状的不满和无奈中，逐步扭曲了本心，每个人都在胶着中生活。透析内心世界，有对过去不用闷在口罩中生活的怀念，有对现状的抱怨和对未来能恢复“正常”的期待。</p>
<p>两年多时间过来了，在各种正面与侧面的宣传下，大家似乎已经习惯了那种清零和爆发之间的切换，一次次充满希望，一次次又被浇灭。社会竞争加剧，每个人似乎都变得没有了耐心。如果说从前，很多人还会去做一些“无意义”的事情去扩充自己的精神边界，但现如今更多人实实在在问起了每一件事的“价值”。并无意说这种情况不好，从某种角度来讲，对于这样一个特殊的时间节点下，都有了明确的目标和价值量化，反而是最高效率的体现。然而，这种高效下，其实本质和丛林生活没有区别。离近了，每一个人嘴里嗫嚅着的一句话，都是“活下去。”</p>
<p>坦白说，每当想起当前的现状，都会感觉到有一丝的可悲，看着周围在这疫情纪元中出生和离去的人。离去的人，终究也没有再摘下口罩畅快的呼吸，而在这个时代中出生的人，如果疫情还要这么持续下去，可能对他们来说，一辈子都得与口罩为伴。在他们的人生里，可能很难体会到家长们口中那个曾经不用带着口罩的时代是多么的美好。前些日子一大早在等电梯，遇到了邻居大叔大娘要送小孙女上幼儿园，小孙女在楼道里大声哭喊着不要戴口罩，大叔的默不作声和轻叹，大娘的催促声和小女孩撕心裂肺的哭喊声。一时间，一阵心酸涌了上来。</p>
<p>在这样的环境下，其实想想之于个人，也是个一步步成长的过程。虽然内心中依然有很多的不甘和不情愿，虽然还有着太多的无可奈何，但总归是越来越少的去抱怨了。有时候想来，其实更本质的，是和自己的和解。有很多的坚持本来就毫无意义。一旦放下那些不甘，再去审视这一切的时候，可能反而更容易找到新的出路。很多时候的无力感，都是跟自己毫无意义的较劲。</p>
<p>“可是，有些时候你并不需要坚强。”——在我们习惯了所谓的坚强后，有时候也可以听听自己内心的声音，也许真的我们并不需要一直那么坚强，也许，在某些时候，会有人替你遮挡一会风雨。哪怕，就是一只平时对你爱理不搭的小猫咪呢。一次出差长沙连续几个晚上噩梦惊扰，坐在床上，少了往日大橘和二猫的呼噜声，一时间有点空落落的。但也深刻的明白了，事实上，在我们一起的生活中，并不是他们离不开我，而是我离不开他们。</p>
<p>新的一年要来了，还是和去年一样，把好好读书放在第一位，动荡年代的不安和焦虑圈定了我们行动的范围，但我们依然可以选择通过阅读去拓宽自己的精神边界。让自己充实起来抵御内心的不安。希望可以坚持运动，让自己精力更充沛一点。好好工作，多一些对行业的了解和深入的研究。进一步扩展自己的知识边界。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂感</tag>
      </tags>
  </entry>
</search>
